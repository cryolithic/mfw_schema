# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2025-09-12T10:08:27+00:00

from __future__ import annotations

from enum import Enum
from typing import TYPE_CHECKING, Any, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, confloat, conint, constr

if TYPE_CHECKING:
    from ipaddress import IPv4Address, IPv6Address


class AddressFamily(BaseModel):
    ipv4: bool = Field(..., description="Enable IPv4 address family")
    ipv6: bool = Field(..., description="Enable IPv6 address family")


class Neighbor(BaseModel):
    ip: str = Field(..., description="The IP address of the neighbor")
    asn: conint(ge=0, le=4294967295) = Field(
        ..., description="The Autonomous System Number of the neighbor"
    )
    update_source: str | None = Field(None, description="The source IP address for BGP updates")
    keepalive: int | None = Field(60, description="The BGP keepalive timer in seconds")
    hold: int | None = Field(180, description="The BGP hold timer in seconds")


class BgpItem(BaseModel):
    vrf: str | None = Field("default", description="The VRF to use for this BGP instance")
    local_asn: conint(ge=0, le=4294967295) = Field(
        ..., description="The local Autonomous System Number"
    )
    router_id: IPv4Address = Field(..., description="The BGP router ID")
    graceful_restart: bool | None = Field(False, description="Enable BGP graceful restart")
    advertised_networks: list[str] | None = Field(
        None, description="A list of networks to advertise"
    )
    address_family: AddressFamily = Field(..., description="BGP address family configuration")
    neighbor: Neighbor = Field(..., description="BGP neighbor configuration")


class SwitchPort(BaseModel):
    id: str = Field(..., description="The port id")
    pvid: str = Field(..., description="The primary vlan id")
    cpu_port: bool = Field(..., description="True if this port is connected directly to the CPU")


class SwitchVlan(BaseModel):
    id: str = Field(..., description="The vlan id")


class DeviceSettings(BaseModel):
    pass


class Type(Enum):
    NIC = "NIC"
    VLAN = "VLAN"
    WIFI = "WIFI"
    OPENVPN = "OPENVPN"
    WIREGUARD = "WIREGUARD"
    WWAN = "WWAN"


class ConfigType(Enum):
    ADDRESSED = "ADDRESSED"
    BRIDGED = "BRIDGED"


class V4ConfigType(Enum):
    STATIC = "STATIC"
    DHCP = "DHCP"
    DISABLED = "DISABLED"


class V6ConfigType(Enum):
    DHCP = "DHCP"
    SLAAC = "SLAAC"
    ASSIGN = "ASSIGN"
    STATIC = "STATIC"
    DISABLED = "DISABLED"


class DhcpOption(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: bool = Field(..., description="True if option is enabled")
    description: str | None = Field(
        None, description="Admin-supplied human readable description"
    )
    value: str = Field(..., description="The dnsmasq option value")


class WirelessEncryption(Enum):
    NONE = "NONE"
    WPA1 = "WPA1"
    WPA12 = "WPA12"
    WPA2 = "WPA2"


class WirelessMode(Enum):
    AP = "AP"
    CLIENT = "CLIENT"


class WireguardEditMode(Enum):
    PASTE = "PASTE"
    MANUAL = "MANUAL"


class WireguardType(Enum):
    ROAMING = "ROAMING"
    TUNNEL = "TUNNEL"


class SimAuth(Enum):
    NONE = "NONE"
    PAP = "PAP"
    CHAP = "CHAP"
    BOTH = "BOTH"


class SimMode(Enum):
    ALL = "ALL"
    LTE = "LTE"
    UMTS = "UMTS"
    GSM = "GSM"
    CDMA = "CDMA"
    TDSCDMA = "TDSCDMA"


class SimPdptype(Enum):
    IPV4 = "IPV4"
    IPV6 = "IPV6"
    IPV4V6 = "IPV4V6"


class EthDuplex(Enum):
    half = "half"
    full = "full"


class Encoding(Enum):
    base64 = "base64"


class FileSettings(BaseModel):
    encoding: Encoding = Field(..., description="The encoding of the file")
    contents: str = Field(..., description="The (encoded) contents of the file")
    path: str | None = Field(None, description="The path of the file, not useds in some cases")
    operation: str | None = Field(
        None,
        description="The sync-settings operation that needs to take place if this file changes",
    )


class Ipv4Alias(BaseModel):
    pass


class Ipv6Alias(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    v6Address: IPv6Address = Field(..., description="The IPv6 static address")
    v6Prefix: conint(ge=1, le=128) = Field(..., description="The IPv6 static prefix")


class WireguardAddress(BaseModel):
    pass


class WireguardAllowedIp(BaseModel):
    pass


class WireguardPeer(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    publicKey: str = Field(..., description="The wireguard peer's public key")
    allowedIps: list[WireguardAllowedIp] = Field(
        ..., description="List of peer's allowed IP addresses"
    )
    host: str | None = Field(None, description="The wireguard server's IP or hostname")
    port: int | None = Field(None, description="The wireguard server's port")
    presharedKey: str | None = Field(None, description="The wireguard peer's pre-shared key")
    keepalive: int | None = Field(
        None,
        description="The wireguard persistent keepalive interval (seconds) for this peer",
    )
    routeAllowedIps: bool | None = Field(
        None, description="True if packets from this wireguard peer should be routed"
    )


class Track(BaseModel):
    pass


class Logging(BaseModel):
    type: str | None = Field(None, description="Type of log file")
    file: str | None = Field(None, description="Path to log file")
    size: int | None = Field(None, description="Size of log file in Kib")
    remote: bool | None = Field(None, description="Is log file located remotely")
    ip: str | None = Field(None, description="IP of remote log")
    port: int | None = Field(None, description="Port of remote log")
    protocol: str | None = Field(
        None, description="Protocol for remote logging (either tcp/udp)"
    )
    prefix: str | None = Field(None, description="Logging Prefix")


class SetupWizardSettings(BaseModel):
    completed: bool | None = Field(
        None, description="True if the setup wizard has been completed"
    )
    lastStep: str | None = Field(
        None,
        description="The last completed step of the wizard (used by the wizard to store progress for restore)",
    )


class TimeZoneSettings(BaseModel):
    displayName: str | None = Field(
        None, description="The display name of the timezone (in the UI)"
    )
    value: str | None = Field(None, description="The actual value of the timezone (used by OS)")


class CloudSettings(BaseModel):
    enabled: bool | None = Field(None, description="Enable cloud connection")
    supportAccessEnabled: bool | None = Field(
        None, description="Enable remote support team access"
    )
    cloudServers: list[str] | None = Field(None, description="Remote cloud servers")


class AutoSettings(BaseModel):
    enabled: bool | None = Field(None, description="Enable auto schedule")
    dayOfWeek: conint(ge=0, le=6) | None = Field(
        None,
        description="The day of week to auto run process (0-6) (0 is Sunday 6 is Saturday)",
    )
    hourOfDay: conint(ge=0, le=23) | None = Field(
        None, description="The hour of day to auto run process (0-23)"
    )
    minuteOfHour: conint(ge=0, le=59) | None = Field(
        None, description="The minute of hour to auto run process (0-59)"
    )


class Type1(Enum):
    TEXT = "TEXT"
    EVENTS = "EVENTS"
    CATEGORIES = "CATEGORIES"
    SERIES = "SERIES"
    CATEGORIES_SERIES = "CATEGORIES_SERIES"


class Operator(Enum):
    EQ = "EQ"
    NE = "NE"
    GT = "GT"
    LT = "LT"
    GE = "GE"
    LE = "LE"
    LIKE = "LIKE"
    NOT_LIKE = "NOT_LIKE"
    IS = "IS"
    IS_NOT = "IS_NOT"
    IN = "IN"
    NOT_IN = "NOT_IN"


class ReportQueryText(BaseModel):
    columns: list[str] = Field(..., description="The columns to query for text-based reports")


class ReportQuerySeries(BaseModel):
    columns: list[str] | None = Field(
        None,
        description="The columns to query for series reports. If null, the columns will be queried dynamically using categoriesGroupColumn, categoriesAggregation, and categoriesLimit. If unspecified the categories query will be used to determine columns",
    )
    timeIntervalSeconds: conint(ge=1) | None = Field(
        None,
        description="The time granularity of series report in seconds (1 = 1 datapoint/second, 60 = 1 datapoint/minute). Beware often 1 second is ideal and the UI can aggregate multiple datapoints using dataGroupingApproximation. 60 if unspecified.",
    )


class ReportQueryCategories(BaseModel):
    groupColumn: str = Field(
        ...,
        description="This is the column to group by in categories reports. This is the X in Top X category reports.",
    )
    aggregationFunction: str = Field(
        ...,
        description="This is the aggregation function for the categoriesGroupColumn. This is usually count(*) or sum(*).",
    )
    aggregationValue: str = Field(
        ...,
        description='This is the value to be aggregated. For count(*) this can be "*".',
    )
    limit: int | None = Field(
        None,
        description="This is the limit of the number of results for categories. 10 for Top 10. Beware this is normally null (no limit) as the rendering will properly show the sum of the long tail of values as 'Others'.",
    )
    orderByColumn: conint(ge=1, le=2) | None = Field(
        None,
        description="This defines the column to use to order the results. 1 means categoriesOrderByColumn, 2 means the aggregation by value. 2 if unspecified.",
    )
    orderAsc: bool | None = Field(
        None,
        description="If true the results will be order by ASC, if false or unspecified the results will be order by DESC.",
    )


class ReportQueryEvents(BaseModel):
    orderByColumn: str | None = Field(
        None,
        description="The column name to order by. If unspecified the results will be ordered by 'time_stamp'",
    )
    orderAsc: bool | None = Field(
        None,
        description="If true the results will be order by ASC, if false or unspecified the results will be order by DESC.",
    )


class Type3(Enum):
    spline = "spline"
    line = "line"
    areaspline = "areaspline"
    area = "area"
    pie = "pie"
    column = "column"


class Stacking(Enum):
    none = "none"
    normal = "normal"
    percent = "percent"


class DashStyle(Enum):
    Solid = "Solid"
    ShortDash = "ShortDash"
    ShortDashDot = "ShortDashDot"
    ShortDashDotDot = "ShortDashDotDot"
    Dot = "Dot"
    Dash = "Dash"
    LongDash = "LongDash"
    LongDashDot = "LongDashDot"
    LongDashDotDot = "LongDashDotDot"


class DataGroupingApproximation(Enum):
    average = "average"
    high = "high"
    low = "low"
    sum = "sum"


class ReportRendering(BaseModel):
    type: Type3 | None = Field(None, description="The chart type")
    units: str | None = Field(None, description="The units of the report")
    colors: list[str] | None = Field(None, description="The color palette")
    stacking: Stacking | None = Field(
        None,
        description="Stacking type. In case of Time Series data, multiple series can be stacked.",
    )
    lineWidth: confloat(ge=0.0, le=5.0, multiple_of=0.5) | None = Field(
        None, description="The line/area chart line width (px)"
    )
    borderWidth: confloat(ge=0.0, le=5.0, multiple_of=0.5) | None = Field(
        None, description="The border width separating pie slices (px)"
    )
    topAreaOpacity: confloat(ge=0.0, le=1.0, multiple_of=0.1) | None = Field(
        None, description="The opacity of top part for an area chart"
    )
    bottomAreaOpacity: confloat(ge=0.0, le=1.0, multiple_of=0.1) | None = Field(
        None, description="The opacity of bottom part for an area chart"
    )
    dashStyle: DashStyle | None = Field(
        None, description="The line/area charts line dashing style"
    )
    dataGroupingEnabled: bool | None = Field(
        None, description="True to enable data grouping for Time Series"
    )
    dataGroupingApproximation: DataGroupingApproximation | None = Field(
        None, description="The approximation method for data grouping"
    )
    dataGroupingFactor: confloat(ge=10.0, le=50.0, multiple_of=10.0) | None = Field(
        None,
        description="The data grouping size. Higher value results in bigger number of points being grouped. (px)",
    )
    donutInnerSize: confloat(ge=0.0, le=90.0, multiple_of=10.0) | None = Field(
        None,
        description="Inner ring percent size of a donut (which is a pie based chart). 0 is equivalent to a normal pie",
    )
    field_3dEnabled: bool | None = Field(
        None,
        alias="3dEnabled",
        description="Enable or disable the 3D options for the pie/donut charts",
    )
    field_3dAlpha: confloat(ge=0.0, le=100.0, multiple_of=5.0) | None = Field(
        None, alias="3dAlpha", description="Adjusts the 3D aspect of the pie chart"
    )
    field_3dDepth: confloat(ge=10.0, le=50.0, multiple_of=5.0) | None = Field(
        None, alias="3dDepth", description="Adjusts the 3D depth of the pie chart"
    )
    slicesNumber: confloat(ge=2.0, le=15.0, multiple_of=1.0) | None = Field(
        None, description="The number of pie slices to show on pie charts by default"
    )
    defaultColumns: list[str] | None = Field(
        None,
        description="The the default column names to display for event list reports",
    )
    columnRenames: dict[str, Any] | None = Field(
        None, description="A string->string map for database name to display name"
    )
    textString: str | None = Field(
        None, description="The user-defined string for a text report"
    )


class Type4(Enum):
    JUMP = "JUMP"
    GOTO = "GOTO"
    ACCEPT = "ACCEPT"
    RETURN = "RETURN"
    REJECT = "REJECT"
    DROP = "DROP"


class Family(Enum):
    inet = "inet"
    ip = "ip"
    ip6 = "ip6"
    arp = "arp"
    bridge = "bridge"
    netdev = "netdev"
    ip_ip6 = "ip,ip6"
    ip_ip6_inet = "ip,ip6,inet"


class ChainType(Enum):
    filter = "filter"
    route = "route"
    nat = "nat"


class Hook(Enum):
    prerouting = "prerouting"
    input = "input"
    forward = "forward"
    output = "output"
    postrouting = "postrouting"
    ingress = "ingress"


class Type6(Enum):
    JUMP = "JUMP"
    GOTO = "GOTO"
    ACCEPT = "ACCEPT"
    RETURN = "RETURN"
    SNAT = "SNAT"
    MASQUERADE = "MASQUERADE"


class PortForwardTable(RootModel[Any]):
    root: Any


class Type7(Enum):
    JUMP = "JUMP"
    GOTO = "GOTO"
    ACCEPT = "ACCEPT"
    RETURN = "RETURN"
    REJECT = "REJECT"
    DROP = "DROP"
    DNAT = "DNAT"
    SNAT = "SNAT"
    MASQUERADE = "MASQUERADE"
    SET_PRIORITY = "SET_PRIORITY"
    LIMIT_EXCEED_ACTION = "LIMIT_EXCEED_ACTION"
    WAN_POLICY = "WAN_POLICY"


class RuleAction(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    type: Type7 | None = None
    chain: str | None = None
    dnat_address: str | None = None
    dnat_port: int | None = None
    snat_address: str | None = None
    priority: conint(ge=1, le=21) | None = None
    destination: int | None = None
    policy: int | None = None
    limit_exceed_action: str | None = None
    return_action: bool | None = Field(
        None,
        description="True if an additional RETURN action is to be added ahead of SET_PRIORITY",
    )


class Type8(Enum):
    JUMP = "JUMP"
    GOTO = "GOTO"
    ACCEPT = "ACCEPT"
    RETURN = "RETURN"
    DROP = "DROP"
    SET_PRIORITY = "SET_PRIORITY"
    LIMIT_EXCEED_ACTION = "LIMIT_EXCEED_ACTION"


class Action3(RuleAction):
    type: Type8 | None = None


class Op(Enum):
    field__ = "=="
    field___1 = "!="


class RuleCondition1(BaseModel):
    op: Op | None = None


class Value(Enum):
    unspec = "unspec"
    unicast = "unicast"
    local = "local"
    broadcast = "broadcast"
    anycast = "anycast"
    multicast = "multicast"
    blackhole = "blackhole"
    unreachable = "unreachable"
    prohibit = "prohibit"


class Type9(Enum):
    IP_PROTOCOL = "IP_PROTOCOL"
    SOURCE_ADDRESS = "SOURCE_ADDRESS"
    SOURCE_ADDRESS_TYPE = "SOURCE_ADDRESS_TYPE"
    DESTINATION_ADDRESS = "DESTINATION_ADDRESS"
    DESTINATION_ADDRESS_TYPE = "DESTINATION_ADDRESS_TYPE"
    CLIENT_ADDRESS = "CLIENT_ADDRESS"
    SERVER_ADDRESS = "SERVER_ADDRESS"
    LOCAL_ADDRESS = "LOCAL_ADDRESS"
    REMOTE_ADDRESS = "REMOTE_ADDRESS"
    CLIENT_ADDRESS_V6 = "CLIENT_ADDRESS_V6"
    SERVER_ADDRESS_V6 = "SERVER_ADDRESS_V6"
    LOCAL_ADDRESS_V6 = "LOCAL_ADDRESS_V6"
    REMOTE_ADDRESS_V6 = "REMOTE_ADDRESS_V6"
    SOURCE_ADDRESS_V6 = "SOURCE_ADDRESS_V6"
    DESTINATION_ADDRESS_V6 = "DESTINATION_ADDRESS_V6"
    SOURCE_PORT = "SOURCE_PORT"
    DESTINATION_PORT = "DESTINATION_PORT"
    CLIENT_PORT = "CLIENT_PORT"
    SERVER_PORT = "SERVER_PORT"
    LOCAL_PORT = "LOCAL_PORT"
    REMOTE_PORT = "REMOTE_PORT"
    CLIENT_INTERFACE_ZONE = "CLIENT_INTERFACE_ZONE"
    SERVER_INTERFACE_ZONE = "SERVER_INTERFACE_ZONE"
    SOURCE_INTERFACE_ZONE = "SOURCE_INTERFACE_ZONE"
    DESTINATION_INTERFACE_ZONE = "DESTINATION_INTERFACE_ZONE"
    CLIENT_INTERFACE_TYPE = "CLIENT_INTERFACE_TYPE"
    SERVER_INTERFACE_TYPE = "SERVER_INTERFACE_TYPE"
    SOURCE_INTERFACE_TYPE = "SOURCE_INTERFACE_TYPE"
    DESTINATION_INTERFACE_TYPE = "DESTINATION_INTERFACE_TYPE"
    SOURCE_INTERFACE_NAME = "SOURCE_INTERFACE_NAME"
    DESTINATION_INTERFACE_NAME = "DESTINATION_INTERFACE_NAME"
    CLIENT_HOSTNAME = "CLIENT_HOSTNAME"
    SERVER_HOSTNAME = "SERVER_HOSTNAME"
    LOCAL_HOSTNAME = "LOCAL_HOSTNAME"
    REMOTE_HOSTNAME = "REMOTE_HOSTNAME"
    CLIENT_USERNAME = "CLIENT_USERNAME"
    CLIENT_DNS_HINT = "CLIENT_DNS_HINT"
    SERVER_USERNAME = "SERVER_USERNAME"
    SERVER_DNS_HINT = "SERVER_DNS_HINT"
    LOCAL_USERNAME = "LOCAL_USERNAME"
    REMOTE_USERNAME = "REMOTE_USERNAME"
    APPLICATION_ID = "APPLICATION_ID"
    APPLICATION_NAME = "APPLICATION_NAME"
    APPLICATION_PROTOCHAIN = "APPLICATION_PROTOCHAIN"
    APPLICATION_DETAIL = "APPLICATION_DETAIL"
    APPLICATION_CATEGORY = "APPLICATION_CATEGORY"
    APPLICATION_ID_INFERRED = "APPLICATION_ID_INFERRED"
    APPLICATION_NAME_INFERRED = "APPLICATION_NAME_INFERRED"
    APPLICATION_CONFIDENCE_INFERRED = "APPLICATION_CONFIDENCE_INFERRED"
    APPLICATION_PROTOCHAIN_INFERRED = "APPLICATION_PROTOCHAIN_INFERRED"
    APPLICATION_PRODUCTIVITY_INFERRED = "APPLICATION_PRODUCTIVITY_INFERRED"
    APPLICATION_RISK_INFERRED = "APPLICATION_RISK_INFERRED"
    APPLICATION_CATEGORY_INFERRED = "APPLICATION_CATEGORY_INFERRED"
    CERT_SUBJECT_CN = "CERT_SUBJECT_CN"
    CERT_SUBJECT_SN = "CERT_SUBJECT_SN"
    CERT_SUBJECT_C = "CERT_SUBJECT_C"
    CERT_SUBJECT_O = "CERT_SUBJECT_O"
    CERT_SUBJECT_OU = "CERT_SUBJECT_OU"
    CERT_SUBJECT_L = "CERT_SUBJECT_L"
    CERT_SUBJECT_P = "CERT_SUBJECT_P"
    CERT_SUBJECT_SA = "CERT_SUBJECT_SA"
    CERT_SUBJECT_PC = "CERT_SUBJECT_PC"
    CERT_SUBJECT_SAN = "CERT_SUBJECT_SAN"
    CERT_SUBJECT_DNS = "CERT_SUBJECT_DNS"
    CERT_ISSUER_CN = "CERT_ISSUER_CN"
    CERT_ISSUER_SN = "CERT_ISSUER_SN"
    CERT_ISSUER_C = "CERT_ISSUER_C"
    CERT_ISSUER_O = "CERT_ISSUER_O"
    CERT_ISSUER_OU = "CERT_ISSUER_OU"
    CERT_ISSUER_L = "CERT_ISSUER_L"
    CERT_ISSUER_P = "CERT_ISSUER_P"
    CERT_ISSUER_SA = "CERT_ISSUER_SA"
    CERT_ISSUER_PC = "CERT_ISSUER_PC"
    CT_STATE = "CT_STATE"
    LIMIT_RATE = "LIMIT_RATE"
    BURST_SIZE = "BURST_SIZE"


class Op1(Enum):
    field__ = "=="
    field___1 = "!="
    field_ = "<"
    field__1 = ">"
    field___2 = "<="
    field___3 = ">="


class RateUnit(Enum):
    PACKETS_PER_SECOND = "PACKETS_PER_SECOND"
    PACKETS_PER_MINUTE = "PACKETS_PER_MINUTE"
    PACKETS_PER_HOUR = "PACKETS_PER_HOUR"
    PACKETS_PER_DAY = "PACKETS_PER_DAY"
    PACKETS_PER_WEEK = "PACKETS_PER_WEEK"
    BYTES_PER_SECOND = "BYTES_PER_SECOND"
    KBYTES_PER_SECOND = "KBYTES_PER_SECOND"
    MBYTES_PER_SECOND = "MBYTES_PER_SECOND"


class BurstUnit(Enum):
    PACKETS = "PACKETS"
    BYTES = "BYTES"
    KBYTES = "KBYTES"
    MBYTES = "MBYTES"


class GroupSelector(Enum):
    IP_PROTOCOL = "IP_PROTOCOL"
    SOURCE_ADDRESS = "SOURCE_ADDRESS"
    DESTINATION_ADDRESS = "DESTINATION_ADDRESS"
    SOURCE_ADDRESS_V6 = "SOURCE_ADDRESS_V6"
    DESTINATION_ADDRESS_V6 = "DESTINATION_ADDRESS_V6"
    SOURCE_PORT = "SOURCE_PORT"
    DESTINATION_PORT = "DESTINATION_PORT"


class RuleCondition2(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Type9
    value: str
    op: Op1 | None = None
    rate_unit: RateUnit | None = None
    burst_unit: BurstUnit | None = None
    group_selector: GroupSelector | None = None


class RuleCondition3(RuleCondition1, RuleCondition2):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Type9
    value: str
    op: Op1 | None = None
    rate_unit: RateUnit | None = None
    burst_unit: BurstUnit | None = None
    group_selector: GroupSelector | None = None


class RuleCondition4(RuleCondition1, RuleCondition2):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Type9
    value: str
    op: Op1 | None = None
    rate_unit: RateUnit | None = None
    burst_unit: BurstUnit | None = None
    group_selector: GroupSelector | None = None


class RuleCondition5(RuleCondition1, RuleCondition2):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Type9
    value: str
    op: Op1 | None = None
    rate_unit: RateUnit | None = None
    burst_unit: BurstUnit | None = None
    group_selector: GroupSelector | None = None


class RuleCondition6(RuleCondition1, RuleCondition2):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Type9
    value: str
    op: Op1 | None = None
    rate_unit: RateUnit | None = None
    burst_unit: BurstUnit | None = None
    group_selector: GroupSelector | None = None


class RuleCondition7(RuleCondition1, RuleCondition2):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Type9
    value: str
    op: Op1 | None = None
    rate_unit: RateUnit | None = None
    burst_unit: BurstUnit | None = None
    group_selector: GroupSelector | None = None


class RuleCondition8(RuleCondition1, RuleCondition2):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Type9
    value: str
    op: Op1 | None = None
    rate_unit: RateUnit | None = None
    burst_unit: BurstUnit | None = None
    group_selector: GroupSelector | None = None


class RuleCondition9(RuleCondition1, RuleCondition2):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Type9
    value: str
    op: Op1 | None = None
    rate_unit: RateUnit | None = None
    burst_unit: BurstUnit | None = None
    group_selector: GroupSelector | None = None


class RuleCondition(
    RootModel[
        Union[
            RuleCondition3,
            RuleCondition4,
            RuleCondition5,
            RuleCondition6,
            RuleCondition7,
            RuleCondition8,
            RuleCondition9,
        ]
    ]
):
    root: RuleCondition3 | RuleCondition4 | RuleCondition5 | RuleCondition6 | RuleCondition7 | RuleCondition8 | RuleCondition9 = Field(..., description="A rule condition")


class Rule(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    ruleId: conint(ge=1) = Field(..., description="The rule ID")
    enabled: bool | None = Field(None, description="True if rule is enabled, False otherwise")
    description: str | None = Field(None, description="The human description")
    conditions: list[RuleCondition3 | RuleCondition4 | RuleCondition5 | RuleCondition6 | RuleCondition7 | RuleCondition8 | RuleCondition9] | None = None
    action: RuleAction | None = None
    readOnly: bool | None = Field(None, description="True if read only, False otherwise")


class Action2(RuleAction):
    type: Type6 | None = None


class Rule2(Rule):
    action: Action2 | None = None


class Chain(BaseModel):
    name: str = Field(..., description="The name of the chain")
    description: str | None = Field(None, description="The human description")
    hook: Hook | None = Field(
        None, description="The netfilter hook, only applies to base chains"
    )
    priority: int | None = Field(
        None, description="The netfilter priority, only applies to base chains"
    )
    base: bool | None = Field(None, description="True if base chain, False otherwise")
    editable: bool | None = Field(
        None, description="True if chain is editable, False otherwise"
    )
    rules: list[Rule]


class Action1(RuleAction):
    type: Type4 | None = None


class Rule1(Rule):
    action: Action1 | None = None


class Chain1(Chain):
    rules: list[Rule1] | None = None


class Table(BaseModel):
    name: str = Field(..., description="The name of the table")
    family: Family = Field(..., description="The family of the table")
    chain_type: ChainType | None = Field(None, description="The type of chains in this table")
    chains: list[Chain]
    description: str | None = Field(None, description="The human description")


class Action(RuleAction):
    type: Type4 | None = None


class RuleModel(Rule):
    action: Action | None = None


class ChainModel(Chain):
    rules: list[RuleModel] | None = None


class AccessTable(Table):
    chains: list[ChainModel] | None = None


class StaticDhcpEntry(BaseModel):
    address: str = Field(..., description="IP Address to assign to the device")
    macAddress: str = Field(..., description="The MAC address of the device")
    description: str | None = Field(None, description="The human description")


class LocalDnsServer(BaseModel):
    domain: str = Field(..., description="A local domain")
    localServer: str = Field(..., description="The IP of a local DNS server")
    description: str | None = Field(None, description="The human description")


class StaticDnsEntry(BaseModel):
    address: str = Field(..., description="IP Address to map")
    name: str = Field(..., description="The name to map")
    description: str | None = Field(None, description="The human description")


class AccountCredentials(BaseModel):
    username: str | None = Field(None, description="The username")
    email: str | None = Field(None, description="This accounts email address")
    authorizedKeys: str | None = Field(None, description="SSH authorized keys")
    passwordCleartext: str | None = Field(
        None,
        description="The cleartext password - this should not be saved in the settings file",
    )
    passwordHashMD5: str | None = Field(
        None,
        description="The hash of the password as it would appear in /etc/shadow (MD5 salted)",
    )
    passwordHashSHA256: str | None = Field(
        None,
        description="The hash of the password as it would appear in /etc/shadow (SHA256 salted)",
    )
    passwordHashSHA512: str | None = Field(
        None,
        description="The hash of the password as it would appear in /etc/shadow (SHA512 salted)",
    )


class WidgetSettings(BaseModel):
    name: str | None = Field(None, description="The name of the report")
    interval: int | None = Field(None, description="The refresh interval (in seconds)")


class Type17(Enum):
    SPECIFIC_WAN = "SPECIFIC_WAN"
    BEST_OF = "BEST_OF"
    BALANCE = "BALANCE"


class BestOfMetric(Enum):
    LOWEST_LATENCY = "LOWEST_LATENCY"
    HIGHEST_AVAILABLE_BANDWIDTH = "HIGHEST_AVAILABLE_BANDWIDTH"
    LOWEST_JITTER = "LOWEST_JITTER"
    LOWEST_PACKET_LOSS = "LOWEST_PACKET_LOSS"


class BalanceAlgorithm(Enum):
    WEIGHTED = "WEIGHTED"
    LATENCY = "LATENCY"
    AVAILABLE_BANDWIDTH = "AVAILABLE_BANDWIDTH"
    BANDWIDTH = "BANDWIDTH"


class WanInterface(BaseModel):
    interfaceId: int = Field(..., description="The interfaceId of the interface")
    weight: conint(ge=1, le=10000) | None = Field(
        None, description="The static balance weight for this interface"
    )


class Type18(Enum):
    ATTRIBUTE = "ATTRIBUTE"
    METRIC = "METRIC"
    CONNECTIVITY = "CONNECTIVITY"


class Attribute(Enum):
    VPN = "VPN"
    NAME = "NAME"


class Metric(Enum):
    LATENCY = "LATENCY"
    AVAILABLE_BANDWIDTH = "AVAILABLE_BANDWIDTH"
    JITTER = "JITTER"
    PACKET_LOSS = "PACKET_LOSS"


class MetricOp(Enum):
    field_ = "<"
    field__1 = ">"
    field__ = "<="
    field___1 = ">="


class ConnectivityTestType(Enum):
    PING = "PING"
    ARP = "ARP"
    DNS = "DNS"
    HTTP = "HTTP"


class WanCriterion(BaseModel):
    type: Type18 = Field(..., description="The policy type")
    attribute: Attribute | None = Field(None, description="An interface attribute")
    name_contains: str | None = Field(
        None,
        description="The string to search for in interface names for the NAME attribute criterion",
    )
    metric: Metric | None = Field(None, description="An interface metric")
    metric_value: int | None = Field(
        None, description="The value associated with the interface metric"
    )
    metric_op: MetricOp | None = None
    connectivityTestType: ConnectivityTestType | None = Field(
        None, description="The type of connectivity test"
    )
    connectivityTestInterval: int | None = Field(
        None, description="The connectivity test interval in seconds"
    )
    connectivityTestTimeout: int | None = Field(
        None, description="The connectivity test timeout in seconds"
    )
    connectivityTestFailureThreshold: int | None = Field(
        None,
        description="The number of test failures (out of 10) that represents an interface failure",
    )
    connectivityTestTarget: str | None = Field(None, description="IP/host address to test")


class DiscoveryPluginSettings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: str | None = Field(None, description="The discovery collector type")
    enabled: bool | None = Field(None, description="Enable/Disable the individual collector")
    autoInterval: float | None = Field(
        None, description="The autoscan interval to run this collector on"
    )


class Actions1(BaseModel):
    pass


class Actions(BaseModel):
    block: list[str] | None = None
    log: list[str] | None = None


class GeoipNetworkSettings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    address: str | None = Field(None, description="CIDR network to bypass from fencing")
    description: str | None = Field(None, description="Description of the network")


class Authentication(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    shared_secret: str | None = Field(None, description="The shared secret value for auth")
    type: str | None = Field(None, description="the type of authentication configured")


class IpsecEncryption(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    encryption: str | None = Field(None, description="The encryption type")
    group: str | None = Field(None, description="The encryption group information")
    hash: str | None = Field(None, description="The hash type information")


class NetworkDefinition(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    network: str | None = Field(None, description="the network address")
    prefix: float | None = Field(None, description="The network CIDR prefix range")


class StaticRouteItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: bool | None = Field(
        None, description="True if static route is enabled, false otherwise"
    )
    description: str | None = Field(None, description="Description of the static route")
    interfaceId: float | None = Field(
        None, description="The interface ID to link the static route with"
    )
    network: str | None = Field(
        None, description="Static route network destination information"
    )
    nextHop: str | None = Field(
        None, description="The nexthop/gateway of the static route definition"
    )
    metric: float | None = Field(None, description="Specifies the route metric to use")


class ThreatpreventionBypassItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    host: str | None = Field(None, description="CIDR network to bypass from threat prevention")
    description: str | None = Field(None, description="Description of the network")


class UriTranslations(BaseModel):
    uri: str | None = Field(None, description="The URI to match for")
    host: str | None = Field(
        None, description="The host to replace the URI with during URI translation"
    )


class WebfilterCategories(BaseModel):
    enabled: bool | None = Field(
        None,
        description="True if webfilter category is being filtered/blocked, false otherwise",
    )
    flagged: bool | None = Field(
        None, description="True if webfilter category is being flagged, false otherwise"
    )
    id: float | None = Field(None, description="Unique identifier of the webfilter category")
    logged: bool | None = Field(
        None,
        description="True if webfilter category is being reported, false otherwise",
    )


class WebfilterListItem(BaseModel):
    enabled: bool | None = Field(
        None, description="True if list item filtered/blocked, false otherwise"
    )
    description: str | None = Field(None, description="Description of the list item")
    exact: bool | None = Field(
        None,
        description="True if list item name is being exact matched, otherwise wildcard match the name",
    )
    flagged: bool | None = Field(
        None, description="True if list item is being flagged, false otherwise"
    )
    name: str | None = Field(None, description="The list item value to match on")
    logged: bool | None = Field(
        None, description="True if list item is being reported, false otherwise"
    )


class ApplicationControlActions(BaseModel):
    reject: list[str] | None = None
    block: list[str] | None = None
    flag: list[str] | None = None
    log: list[str] | None = None


class Type19(Enum):
    CLIENT_ADDRESS = "CLIENT_ADDRESS"
    CLIENT_PORT = "CLIENT_PORT"
    SERVER_ADDRESS = "SERVER_ADDRESS"
    SERVER_PORT = "SERVER_PORT"
    PROTOCOL_TYPE = "PROTOCOL_TYPE"


class ApplicationControlCustomRulesCondition(BaseModel):
    type: Type19 | None = None
    value: str | None = None
    op: Op1 | None = None


class Type20(Enum):
    CLIENT_ADDRESS = "CLIENT_ADDRESS"
    CLIENT_PORT = "CLIENT_PORT"
    DAY_OF_WEEK = "DAY_OF_WEEK"
    DEST_ADDRESS = "DEST_ADDRESS"
    DESTINATION_INTERFACE_TYPE = "DESTINATION_INTERFACE_TYPE"
    GEOIP_LOCATION = "GEOIP_LOCATION"
    INTERFACE = "INTERFACE"
    SERVER_ADDRESS = "SERVER_ADDRESS"
    SERVER_PORT = "SERVER_PORT"
    SERVICE_ENDPOINT = "SERVICE_ENDPOINT"
    SERVICE_ENDPOINT_CLIENT = "SERVICE_ENDPOINT_CLIENT"
    SERVICE_ENDPOINT_SERVER = "SERVICE_ENDPOINT_SERVER"
    SOURCE_ADDRESS = "SOURCE_ADDRESS"
    SOURCE_INTERFACE_TYPE = "SOURCE_INTERFACE_TYPE"
    PROTOCOL_TYPE = "PROTOCOL_TYPE"
    TIME_OF_DAY = "TIME_OF_DAY"
    VLAN_ID = "VLAN_ID"
    APPLICATION = "APPLICATION"
    CLIENT_APPLICATION = "CLIENT_APPLICATION"
    SERVER_APPLICATION = "SERVER_APPLICATION"


class Op10(Enum):
    field__ = "=="
    field___1 = "!="
    field_ = "<"
    field__1 = ">"
    field___2 = "<="
    field___3 = ">="
    in_ = "in"
    match = "match"


class PolicyManagerCriterion(BaseModel):
    type: Type20 | None = None
    op: Op10 | None = None
    object: Any | list[Any] | None = None


class Type21(Enum):
    mfw_rule_geoip = "mfw-rule-geoip"


class Type22(Enum):
    mfw_rule_applicationcontrol = "mfw-rule-applicationcontrol"


class Type23(Enum):
    mfw_rule_wanpolicy = "mfw-rule-wanpolicy"


class Type24(Enum):
    mfw_rule_security = "mfw-rule-security"


class Type25(Enum):
    DnsRuleObject = "DnsRuleObject"


class Type26(Enum):
    mfw_rule_portforward = "mfw-rule-portforward"


class Type27(Enum):
    mfw_rule_threatprevention = "mfw-rule-threatprevention"


class Type28(Enum):
    mfw_rule_webfilter = "mfw-rule-webfilter"


class Type29(Enum):
    mfw_rule_captiveportal = "mfw-rule-captiveportal"


class Type30(Enum):
    mfw_rule_shaping = "mfw-rule-shaping"


class Type31(Enum):
    mfw_rule_nat = "mfw-rule-nat"


class PolicyManagerCategory(Enum):
    discovery = "discovery"
    geoip = "geoip"
    threatprevention = "threatprevention"
    webfilter = "webfilter"


class PolicyManagerFilters(RootModel[list[dict[str, Any]]]):
    root: list[dict[str, Any]]


class PolicyManagerFilter(BaseModel):
    operator: str | None = None
    type: str | None = None
    property: str | None = None


class Type32(Enum):
    GeoIPLocation = "GeoIPLocation"
    InterfaceZone = "InterfaceZone"
    IPAddrList = "IPAddrList"
    ServiceEndpoint = "ServiceEndpoint"
    ConditionGroup = "ConditionGroup"


class PolicyManagerIpspecifier(RootModel[Any]):
    root: Any


class PolicyManagerPortspecifier(RootModel[Any]):
    root: Any


class PingAnalyzerSettings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str | None = Field(None, description="Name of Ping Analyzer")
    interfaceIds: list[int] | None = None
    ipv4Addresses: list[str] | None = None
    ipv6Addresses: list[str] | None = None
    enabled: bool | None = Field(None, description="Turns a Ping Analyzer on or off")


class DynamicListsConfiguration(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: bool | None = Field(
        None, description="True, if user want this configuration to be active."
    )
    name: str | None = Field(None, description="Name of the block list from source")
    id: str | None = Field(None, description="ID of the block list from source")
    source: str | None = Field(None, description="The source URL or the local file path")
    type: str | None = Field(None, description="Either IP or URL block list type from source")
    pollingUnit: str | None = Field(
        None,
        description="Tells us the interval of fetching whether its Minutes, Hours, Days or Months as a unit",
    )
    pollingTime: float | None = Field(
        None,
        description="The respective value based on the selection of the PullingUnit",
    )
    skipCertCheck: bool | None = Field(
        None, description="Flag to ignore certificate verification of HTTPS requests"
    )
    parsingMethod: str | None = Field(
        None,
        description="The parsing method for a passed IP list. Stored as a regular expression.",
    )


class Logo(BaseModel):
    imageName: str | None = None


class Type33(Enum):
    ENABLE = "ENABLE"
    DISABLE = "DISABLE"


class Action4(BaseModel):
    type: Type33 | None = None


class Type34(Enum):
    DESTINATION_ADDRESS = "DESTINATION_ADDRESS"
    DESTINATION_ADDRESS_V6 = "DESTINATION_ADDRESS_V6"
    DESTINATION_INTERFACE_TYPE = "DESTINATION_INTERFACE_TYPE"
    DESTINATION_INTERFACE_ZONE = "DESTINATION_INTERFACE_ZONE"
    DESTINATION_PORT = "DESTINATION_PORT"
    SOURCE_ADDRESS = "SOURCE_ADDRESS"
    SOURCE_ADDRESS_V6 = "SOURCE_ADDRESS_V6"
    SOURCE_INTERFACE_TYPE = "SOURCE_INTERFACE_TYPE"
    SOURCE_INTERFACE_ZONE = "SOURCE_INTERFACE_ZONE"
    SOURCE_PORT = "SOURCE_PORT"
    IP_PROTOCOL = "IP_PROTOCOL"


class Op11(Enum):
    field__ = "=="
    field___1 = "!="


class CaptiveportalRulesConditions(BaseModel):
    type: Type34 | None = None
    value: str | None = None
    op: Op11 | None = None


class QuotaManagerConfiguration(BaseModel):
    id: str
    name: str | None = None
    description: str | None = None
    data_size: str
    period: str


class QuotaManagerExceedAction(BaseModel):
    id: str
    name: str | None = None
    description: str | None = None
    default: bool | None = None
    action: str


class Action5(BaseModel):
    pass


class QuotaManagerRuleAction(BaseModel):
    exceed_action_id: str
    quota_id: str
    type: str


class QuotaManagerRuleCondition(BaseModel):
    op: str
    type: str
    value: str
    proto: str | None = None


class Logname(Enum):
    EMERG = "EMERG"
    ALERT = "ALERT"
    CRIT = "CRIT"
    ERROR = "ERROR"
    WARN = "WARN"
    NOTICE = "NOTICE"
    INFO = "INFO"
    DEBUG = "DEBUG"
    TRACE = "TRACE"


class LoggerSetting1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    logname: Logname = Field(..., description="The logging level")


class LoggerSetting(RootModel[Optional[dict[str, LoggerSetting1]]]):
    root: dict[str, LoggerSetting1] | None = Field(
        None, description="The logger settings for a package or function"
    )


class Type35(Enum):
    sqlite = "sqlite"
    mysql = "mysql"
    postgres = "postgres"


class DatabaseConfigSettings(BaseModel):
    name: str | None = Field(None, description="DB Connection name (this will be shown on UI)")
    description: str | None = Field(
        None, description="Additional description for the DB Connection"
    )
    id: str | None = Field(None, description="UUID for Database (auto-generated)")
    type: Type35 | None = Field(None, description="Database type i.e. MySQL,postgres")
    enabled: bool | None = Field(None, description="Database Connection enabled/disabled")
    db_server: str | None = Field(None, description="Remote Host/Server")
    db_name: str | None = Field(None, description="Name of the Database.")
    db_username: str | None = Field(None, description="Username for the Database.")
    db_port: int | None = Field(None, description="Database Port")
    db_password: str | None = Field(None, description="Database password for the given user.")
    db_connection_string: str | None = Field(None, description="Connection String")
    default: bool | None = Field(
        None, description="Flag which determines if the database is default"
    )


class Type36(Enum):
    BYPASS = "BYPASS"


class Action6(BaseModel):
    type: Type36 | None = None


class Type37(Enum):
    DESTINATION_ADDRESS = "DESTINATION_ADDRESS"
    DESTINATION_ADDRESS_V6 = "DESTINATION_ADDRESS_V6"
    DESTINATION_INTERFACE_TYPE = "DESTINATION_INTERFACE_TYPE"
    DESTINATION_INTERFACE_ZONE = "DESTINATION_INTERFACE_ZONE"
    DESTINATION_PORT = "DESTINATION_PORT"
    SOURCE_ADDRESS = "SOURCE_ADDRESS"
    SOURCE_ADDRESS_V6 = "SOURCE_ADDRESS_V6"
    SOURCE_INTERFACE_TYPE = "SOURCE_INTERFACE_TYPE"
    SOURCE_INTERFACE_ZONE = "SOURCE_INTERFACE_ZONE"
    SOURCE_PORT = "SOURCE_PORT"
    IP_PROTOCOL = "IP_PROTOCOL"


class BypassRulesConditions(BaseModel):
    type: Type37 | None = None
    value: str | None = None
    op: Op11 | None = None
    port_protocol: str | None = None


class DnsfilterBlocklist(BaseModel):
    description: str | None = None
    enabled: bool | None = None
    flagged: bool | None = None
    logged: bool | None = None
    exact: bool | None = None
    name: str | None = None


class AlertObject(BaseModel):
    message: str
    enabled: bool


class Action7(Enum):
    alert = "alert"
    block = "block"
    pass_ = "pass"
    reject = "reject"


class IpsRule(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: bool | None = Field(None, description="Enable/Disable the IPS rule")
    sid: int | None = Field(None, description="The unique identifier for the IPS rule")
    action: Action7 | None = Field(None, description="Action to take when the rule matches")
    message: str | None = Field(
        None, description="Message to log when the rule matches (optional)"
    )
    classType: str | None = Field(None, description="Class type of the IPS rule (optional)")


class IpsRuleList(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str | None = Field(None, description="Name of the IPS rule list")
    url: str | None = Field(None, description="URL to fetch the IPS rule list from")
    enabled: bool | None = Field(None, description="Enable/Disable the IPS rule list")
    local_dir: str | None = Field(
        None, description="Local directory to reference the IPS rule list (optional)"
    )
    version: str | None = Field(None, description="Version of the IPS rule list (optional)")


class SwitchSettings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(..., description="The switch name (switch0)")
    ports: list[SwitchPort] = Field(..., description="The ports of the switch")
    vlans: list[SwitchVlan] = Field(..., description="Hardware based vlans of the switch")


class InterfaceSettings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    interfaceId: conint(ge=1) = Field(..., description="Unique interface ID")
    name: constr(min_length=1, max_length=15) = Field(..., description="Human readable name")
    enabled: bool | None = Field(
        None, description="True if this interface is enabled, False otherwise"
    )
    device: str = Field(..., description="The physical dev represented by this interface (eth0)")
    wan: bool = Field(
        ...,
        description="True if interface is a WAN (internet) connected interface, False otherwise",
    )
    hidden: bool | None = Field(
        None,
        description="True if this interface should be hidden from the user, False otherwise",
    )
    type: Type
    configType: ConfigType = Field(..., description="The configuration type")
    natEgress: bool | None = Field(
        None,
        description="If true, NAT outbound sessions and block non-port-forwarded sessions from this interface",
    )
    natIngress: bool | None = Field(
        None,
        description="If true, NAT inbound sessions and block non-port-forwarded sessions to this interface",
    )
    v4ConfigType: V4ConfigType | None = Field(None, description="The IPv4 configuration type")
    v4StaticAddress: IPv4Address | None = Field(None, description="The IPv4 static address")
    v4StaticPrefix: conint(ge=1, le=32) | None = Field(
        None, description="The IPv4 static prefix (netmask)"
    )
    v4StaticGateway: IPv4Address | None = Field(None, description="The IPv4 static gateway")
    v4StaticDNS1: IPv4Address | None = Field(None, description="The IPv4 DNS 1")
    v4StaticDNS2: IPv4Address | None = Field(None, description="The IPv4 DNS 2")
    v4DhcpAddressOverride: IPv4Address | None = Field(
        None, description="The DHCP address override"
    )
    v4DhcpPrefixOverride: conint(ge=1, le=32) | None = Field(
        None, description="The DHCP prefix override"
    )
    v4DhcpGatewayOverride: IPv4Address | None = Field(
        None, description="The DHCP gateway override"
    )
    v4DhcpDNS1Override: IPv4Address | None = Field(None, description="The DHCP DNS 1 override")
    v4DhcpDNS2Override: IPv4Address | None = Field(None, description="The DHCP DNS 2 override")
    v4PPPoEUsername: constr(min_length=1) | None = Field(None, description="The PPPoE username")
    v4PPPoEPassword: constr(min_length=1) | None = Field(None, description="The PPPoE password")
    v4PPPoEUsePeerDNS: bool | None = Field(None, description="If true, use PPPoE peer DNS")
    v4PPPoEOverrideDNS1: IPv4Address | None = Field(
        None, description="The PPPoE DNS 1 override"
    )
    v4PPPoEOverrideDNS2: IPv4Address | None = Field(
        None, description="The PPPoE DNS 2 override"
    )
    v4Aliases: list[Ipv4Alias] | None = Field(None, description="IPv4 address aliases")
    v6ConfigType: V6ConfigType | None = Field(None, description="IPv6 configuration type")
    v6StaticAddress: IPv6Address | None = Field(None, description="The IPv6 static address")
    v6StaticPrefix: conint(ge=1, le=128) | None = Field(
        None, description="The IPv6 static prefix"
    )
    v6StaticGateway: IPv6Address | None = Field(None, description="The IPv6 static gateway")
    v6StaticDNS1: IPv6Address | None = Field(None, description="The IPv6 DNS 1")
    v6StaticDNS2: IPv6Address | None = Field(None, description="The IPv6 DNS 2")
    v6DhcpDNS1Override: IPv6Address | None = Field(None, description="The DHCP DNS 1 override")
    v6DhcpDNS2Override: IPv6Address | None = Field(None, description="The DHCP DNS 2 override")
    v6AssignHint: str | None = Field(None, description="The IPv6 auto assign hint")
    v6AssignPrefix: conint(ge=1, le=128) | None = Field(
        None, description="The IPv6 auto assign prefix"
    )
    v6Aliases: list[Ipv6Alias] | None = Field(None, description="IPv6 address aliases")
    routerAdvertisements: bool | None = Field(None, description="Send router advertisements")
    bridgedTo: conint(ge=1) | None = Field(
        None,
        description="The interface ID that this interface is bridgedTo if this is configType == BRIDGED",
    )
    qosEnabled: bool | None = Field(None, description="Enable QoS")
    downloadKbps: conint(ge=0) | None = Field(
        None,
        description="The maximum download kilobit per second of this WAN interface",
    )
    uploadKbps: conint(ge=0) | None = Field(
        None, description="The maximum upload kilobit per second of this WAN interface"
    )
    macaddr: str | None = Field(None, description="The MAC address to set for the interface")
    dhcpEnabled: bool | None = Field(
        None, description="If true, provide DHCP on this interface"
    )
    dhcpRangeStart: IPv4Address | None = Field(
        None, description="The start of the DHCP offer range"
    )
    dhcpRangeEnd: IPv4Address | None = Field(
        None, description="The end of the DHCP offer range"
    )
    dhcpLeaseDuration: conint(ge=0) | None = Field(
        None, description="The DHCP lease duration in seconds"
    )
    dhcpGatewayOverride: IPv4Address | None = Field(
        None,
        description="The DHCP gateway to offer. If null, the local interface IP is used",
    )
    dhcpPrefixOverride: conint(ge=1, le=32) | None = Field(
        None,
        description="The DHCP prefix/netmask to offer. If null, the local interface prefix is used",
    )
    dhcpDNSOverride: IPv4Address | None = Field(
        None,
        description="The DHCP DNS to offer. If null, the local interface IP is used",
    )
    dhcpOptions: list[DhcpOption] | None = Field(None, description="DHCP Options")
    vrrpEnabled: bool | None = Field(None, description="True if VRRP is enabled")
    vrrpID: conint(ge=1, le=255) | None = Field(None, description="The VRRP ID")
    vrrpPriority: conint(ge=1, le=255) | None = Field(None, description="The VRRP priority")
    vrrpV4Aliases: list[Ipv4Alias] | None = Field(None, description="VRRP IPv4 address aliases")
    vrrpTrack: list[Track] | None = Field(None, description="VRRP Group Tracked Objects")
    wirelessSsid: str | None = Field(None, description="The wireless SSID")
    wirelessEncryption: WirelessEncryption | None = Field(
        None, description="The wireless encryption method"
    )
    wirelessMode: WirelessMode | None = Field(
        None, description="The wireless mode (AP or client)"
    )
    wirelessPassword: str | None = Field(None, description="The wireless password")
    wirelessChannel: conint(ge=0) | None = Field(None, description="The wireless channel")
    wirelessThroughput: str | None = Field(None, description="The wireless throughput mode")
    openvpnConfFile: FileSettings | None = None
    openvpnUsernamePasswordEnabled: bool | None = Field(
        None,
        description="True if this openvpn interface requires username/password authentication",
    )
    openvpnUsername: str | None = Field(
        None, description="The openvpn username if usename authentication enabled"
    )
    boundInterfaceId: str | None = Field(
        None,
        description="The interfaceId of the interface that binding technologies i.e. openvpn, VLANs, Wireguard should use to connect (0 or undefined means Any WAN)",
    )
    openvpnPasswordBase64: str | None = Field(
        None,
        description="The openvpn password in cleartext/base64 if username authentication if enabled",
    )
    openvpnPeerDns: bool | None = Field(
        None,
        description="Enables or Disables using the Peer DNS option from the OpenVPN tunnel",
    )
    wireguardPrivateKey: str | None = Field(None, description="The wireguard private key")
    wireguardPublicKey: str | None = Field(None, description="The wireguard public key")
    wireguardAddresses: list[WireguardAddress] | None = Field(
        None, description="List of WireGuard's interface IP addresses"
    )
    wireguardEditMode: WireguardEditMode | None = Field(
        None, description="How this VPN is to be edited"
    )
    wireguardType: WireguardType | None = Field(None, description="Type of of VPN")
    wireguardPort: int | None = Field(None, description="The port that wireguard listens on")
    wireguardPeers: list[WireguardPeer] | None = Field(
        None, description="List of wireguard peers"
    )
    simNetwork: str | None = Field(None, description="Sim network name")
    simApn: str | None = Field(None, description="Modem access point name")
    simProfile: int | None = Field(None, description="Modem profile number")
    simPin: int | None = Field(None, description="Sim pin code")
    simDelay: int | None = Field(None, description="Delay before configuring the modem on boot")
    simTimeout: int | None = Field(
        None, description="Time to wait while attempting to configure the connection"
    )
    simAuth: SimAuth | None = Field(None, description="Sim authentication method")
    simUsername: str | None = Field(None, description="Sim authentication username")
    simPassword: str | None = Field(None, description="Sim authentication password")
    simMode: SimMode | None = Field(None, description="Sim mode")
    simPdptype: SimPdptype | None = Field(None, description="Sim connection method")
    simPlmn: int | None = Field(
        None,
        description="Sim PLMN (first three digits are mmc, last three digits are mnc)",
    )
    simAutoconnect: bool | None = Field(None, description="Enable automatic connect/reconnect")
    ethAutoneg: bool | None = Field(None, description="Auto negotiation on/off")
    ethDuplex: EthDuplex | None = Field(None, description="Duplex mode")
    ethSpeed: int | None = Field(None, description="Interface speed")
    mtu: int | None = Field(None, description="Interface MTU setting")
    routeMtu: bool | None = Field(None, description="Use Route MTU Discovery to determine MTU")
    vlanid: int | None = Field(
        None,
        description="Software device level 8021q VLAN ID to assign to an interface - requires a parent 'boundInterfaceId'",
    )
    virtual: bool | None = Field(
        None, description="Virtual interface indicator (vlan/vpn/etc.)"
    )
    wanWeight: float | None = Field(
        None,
        description="Weight of WAN interacted to use in weighted balance algorithms",
    )


class SystemSettings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    hostName: str
    domainName: str
    httpPort: str | None = None
    httpsPort: str | None = None
    cloud: CloudSettings | None = None
    timeZone: TimeZoneSettings | None = None
    setupWizard: SetupWizardSettings | None = None
    autoUpgrade: AutoSettings | None = None
    autoBackup: AutoSettings | None = None
    logging: Logging | None = None


class ReportCondition(BaseModel):
    uniqueId: str = Field(..., description="The unique string identifier")
    name: str = Field(..., description="The name of the report")
    category: str = Field(..., description="The category of the report")
    description: str = Field(..., description="The description of the report")
    displayOrder: int = Field(..., description="The sort order for this report")
    type: Type1 = Field(..., description="The type of report/chart")
    rendering: ReportRendering
    column: str | None = Field(None, description="The column to check the value")
    operator: Operator | None = Field(None, description="The sql operator")
    value: str | None = Field(None, description="The value to check")


class FilterTable(Table):
    chains: list[Chain1] | None = None


class Chain2(Chain):
    rules: list[Rule2] | None = None


class NatTable(Table):
    chains: list[Chain2] | None = None


class Rule3(Rule):
    action: Action3 | None = None


class Chain3(Chain):
    rules: list[Rule3] | None = None


class ShapingTable(Table):
    chains: list[Chain3] | None = None


class FirewallSettings(BaseModel):
    tables: dict[constr(pattern=r"access"), AccessTable] | dict[constr(pattern=r"filter"), FilterTable] | dict[constr(pattern=r"nat"), NatTable] | dict[constr(pattern=r"port_forward"), Any] | dict[constr(pattern=r"shaping"), ShapingTable] | dict[constr(pattern=r".{1,}"), Table] | None = Field(
        None,
        description="A map from the table name as the key, to the table json object",
    )


class DhcpSettings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    dhcpAuthoritative: bool | None = Field(
        None, description="True if this is the only dhcp server on the network"
    )
    staticDhcpEntries: list[StaticDhcpEntry] | None = Field(
        None, description="List of static DHCP assignments"
    )


class DnsSettings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    localServers: list[LocalDnsServer] | None = Field(
        None, description="List of local DNS servers"
    )
    staticEntries: list[StaticDnsEntry] | None = Field(
        None, description="List of static DNS assignments"
    )


class AccountsSettings(BaseModel):
    credentials: list[AccountCredentials] | None = None


class DashboardSettings(BaseModel):
    widgets: list[WidgetSettings] | None = None


class WanPolicy(BaseModel):
    policyId: conint(ge=1) = Field(..., description="The policy ID")
    enabled: bool | None = Field(None, description="True if policy is enabled, False otherwise")
    description: str | None = Field(None, description="The human description")
    type: Type17 = Field(..., description="The policy type")
    best_of_metric: BestOfMetric | None = Field(
        None, description="The metric used for best of policies"
    )
    interfaces: list[WanInterface] = Field(
        ...,
        description="The list of interfaces in the policy.  A single interface of id 0 means all wan interfaces",
    )
    balance_algorithm: BalanceAlgorithm | None = Field(
        None, description="Algorithm used for balance type policies"
    )
    criteria: list[WanCriterion] | None = Field(
        None, description="The list of policy interface criteria"
    )
    readOnly: bool | None = Field(None, description="True if read only, False otherwise")


class DiscoverySettings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: bool | None = Field(
        None, description="Enable/Disable the host device discovery tool"
    )
    plugins: list[DiscoveryPluginSettings] | None = None


class GeoipSettings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: bool | None = Field(None, description="Enable/Disable the geoip fencing service")
    enabledLog: bool | None = Field(
        None, description="Enable/Disable logging of the the geoip fencing results"
    )
    actions: list[Actions] | Actions1 | None = None
    passedNetworks: list[GeoipNetworkSettings] | None = None


class GatewayDefinition(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    gateway: str | None = Field(
        None, description="gateway address information for local/remote gateway"
    )
    networks: list[NetworkDefinition] | None = None


class RouteSettings(RootModel[list[StaticRouteItem]]):
    root: list[StaticRouteItem] = Field(..., description="Static route entries")


class ThreatpreventionSettings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: bool | None = Field(
        None, description="Enable/Disable the threat prevention service"
    )
    redirect: bool | None = Field(None, description="Enable/Disable redirection to block page")
    sensitivity: float | None = Field(
        None,
        description="Threat Prevention sensitivity level, block everything above this threat level",
    )
    passList: list[ThreatpreventionBypassItem] | None = None


class Uris(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    uriTranslations: list[UriTranslations] | None = None


class WebfilterSettings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: bool | None = Field(
        None, description="True if webfilter is enabled, false otherwise"
    )
    categories: list[WebfilterCategories] | None = None
    blockList: list[WebfilterListItem] | None = None
    passList: list[WebfilterListItem] | None = None


class ApplicationControlCustomRules(BaseModel):
    name: str | None = None
    description: str | None = None
    category: str | None = None
    conditions: list[list[ApplicationControlCustomRulesCondition]] | None = None
    action: str | None = None


class PolicyManagerConfiguration(BaseModel):
    id: str
    name: str | None = None
    description: str | None = None
    category: list[PolicyManagerCategory] | None = None


class PolicyManagerObject(BaseModel):
    id: str
    name: str | None = None
    description: str | None = None


class PolicyManagerObjectGroup(BaseModel):
    id: str
    name: str | None = None
    description: str | None = None
    items: list[str]


class PolicyManagerCondition(BaseModel):
    id: str
    name: str | None = None
    description: str | None = None
    conditions: list[PolicyManagerCriterion] | None = None


class PolicyManagerConditionGroup(BaseModel):
    id: str
    name: str | None = None
    description: str | None = None
    items: list[str]


class PolicyManagerRule1(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    type: Type21 | None = None
    conditions: list[str] | None = None
    configuration_id: str | None = None


class PolicyManagerRule2(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    type: Type22 | None = None
    conditions: list[str] | None = None
    configuration_id: str | None = None


class PolicyManagerRule3(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    type: Type23 | None = None
    conditions: list[str] | None = None
    configuration_id: str | None = None


class PolicyManagerRule4(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    type: Type24 | None = None
    conditions: list[str] | None = None


class PolicyManagerRule5(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    type: Type25 | None = None
    conditions: list[str] | None = None
    configuration_id: str | None = None


class PolicyManagerRule6(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    type: Type26 | None = None
    conditions: list[str] | None = None
    dnat_address: str | None = None
    dnat_port: int | None = None


class PolicyManagerRule7(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    type: Type27 | None = None
    conditions: list[str] | None = None
    configuration_id: str | None = None


class PolicyManagerRule8(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    type: Type28 | None = None
    conditions: list[str] | None = None
    configuration_id: str | None = None


class PolicyManagerRule9(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    type: Type29 | None = None
    conditions: list[str] | None = None
    configuration_id: str | None = None


class PolicyManagerRule10(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    type: Type30 | None = None
    conditions: list[str] | None = None
    priority: int | None = None


class PolicyManagerRule11(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    type: Type31 | None = None
    conditions: list[str] | None = None
    snat_address: str | None = None


class PolicyManagerRule(
    RootModel[
        Union[
            PolicyManagerRule1,
            PolicyManagerRule2,
            PolicyManagerRule3,
            PolicyManagerRule4,
            PolicyManagerRule5,
            PolicyManagerRule6,
            PolicyManagerRule7,
            PolicyManagerRule8,
            PolicyManagerRule9,
            PolicyManagerRule10,
            PolicyManagerRule11,
        ]
    ]
):
    root: PolicyManagerRule1 | PolicyManagerRule2 | PolicyManagerRule3 | PolicyManagerRule4 | PolicyManagerRule5 | PolicyManagerRule6 | PolicyManagerRule7 | PolicyManagerRule8 | PolicyManagerRule9 | PolicyManagerRule10 | PolicyManagerRule11


class PolicyManagerPolicy(BaseModel):
    id: str
    name: str | None = None
    description: str | None = None
    conditions: list[str] | None = None
    rule: list[str] | None = None


class PolicyManagerGroup(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    type: Type32
    choice: PolicyManagerConditionGroup | list[Any] | None = None


class StatsSettings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pingAnalyzers: list[PingAnalyzerSettings] | None = None


class DynamicListsSettings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: bool | None = Field(
        None, description="enables or disables the entire dynamic blocklist feature"
    )
    configurations: list[DynamicListsConfiguration] | None = None


class CaptiveportalRules(BaseModel):
    description: str | None = None
    enabled: bool | None = None
    ruleId: str | None = None
    conditions: list[CaptiveportalRulesConditions] | None = None
    action: Action4 | None = None


class QuotaManagerRule(BaseModel):
    id: str
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    action: list[QuotaManagerRuleAction] | Action5 | None = None
    conditions: list[QuotaManagerRuleCondition] | None = None


class Logger(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    alertd: dict[str, LoggerSetting1] = Field(
        ..., description="The logger settings for a package or function"
    )
    cls: dict[str, LoggerSetting1] = Field(
        ..., description="The logger settings for a package or function"
    )
    discoverd: dict[str, LoggerSetting1] = Field(
        ..., description="The logger settings for a package or function"
    )
    packetd: dict[str, LoggerSetting1] = Field(
        ..., description="The logger settings for a package or function"
    )
    reportd: dict[str, LoggerSetting1] = Field(
        ..., description="The logger settings for a package or function"
    )
    restd: dict[str, LoggerSetting1] = Field(
        ..., description="The logger settings for a package or function"
    )


class BypassRules(BaseModel):
    description: str | None = None
    enabled: bool | None = None
    ruleId: str | None = None
    conditions: list[BypassRulesConditions] | None = None
    log: str | None = None
    action: Action6 | None = None


class DnsfilterSettings(BaseModel):
    enabled: bool | None = Field(None, description="Enable/Disable the dns filter service")
    blockList: list[DnsfilterBlocklist] | None = None


class IpsSettings(BaseModel):
    enabled: bool | None = Field(None, description="Is plugin enabled")
    enabled_ips: bool | None = Field(None, description="Is IPS enabled")
    rules: list[IpsRule] | None = Field(
        None, description="List of IPS rules used to override the default rules"
    )
    ruleLists: list[IpsRuleList] | None = Field(
        None, description="List of IPS rule list sources"
    )


class NetworkSettings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    interfaces: list[InterfaceSettings] | None = None
    devices: list[DeviceSettings] | None = None
    switches: list[SwitchSettings] | None = None
    bgp: list[BgpItem] | None = None


class ReportEntry(BaseModel):
    uniqueId: str = Field(..., description="The unique string identifier")
    name: str = Field(..., description="The name of the report")
    category: str = Field(..., description="The category of the report")
    description: str = Field(..., description="The description of the report")
    displayOrder: int = Field(..., description="The sort order for this report")
    readOnly: bool | None = Field(None, description="True if read only, False otherwise")
    type: Type1 = Field(..., description="The type of report/chart")
    table: str | None = Field(None, description="The table the report queries")
    tables: list[str] | None = Field(
        None,
        description="A list of tables joined if this is a join. This is used by the UI",
    )
    conditions: list[ReportCondition] | None = None
    columnDisambiguation: list[Any] | None = Field(
        None,
        description="This list of string->string map is a way to disambiguate column names for joined tables (ie time_stamp > a.time_stamp)",
    )
    userConditions: list[ReportCondition] | None = None
    queryCategories: ReportQueryCategories | None = None
    queryText: ReportQueryText | None = None
    querySeries: ReportQuerySeries | None = None
    queryEvents: ReportQueryEvents | None = None
    rendering: ReportRendering


class WanSettings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    policy_chains: list[Chain] | None = None
    policies: list[WanPolicy] | None = None


class IpsecServerSettings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: bool | None = Field(None, description="Enable/Disable the geoip fencing service")
    debug: float | None = Field(None, description="Enable/Disable ipsec server debug logs")
    authentication: Authentication | None = Field(None, description="authentication definition")
    phase1: list[IpsecEncryption] | None = None
    phase2: list[IpsecEncryption] | None = None
    local: list[GatewayDefinition] | None = None
    remote: list[GatewayDefinition] | None = None


class ApplicationControlSettings(BaseModel):
    enabled: bool | None = None
    cloud_classification: bool | None = None
    custom_rules: list[ApplicationControlCustomRules] | None = None
    actions: list[ApplicationControlActions] | None = None


class PolicyManagerSettings(BaseModel):
    enabled: bool | None = None
    configurations: list[PolicyManagerConfiguration]
    objects: list[PolicyManagerObject]
    object_groups: list[PolicyManagerObjectGroup]
    conditions: list[PolicyManagerCondition]
    condition_groups: list[PolicyManagerConditionGroup] | None = None
    rules: list[
        PolicyManagerRule1 | PolicyManagerRule2 | PolicyManagerRule3 | PolicyManagerRule4 | PolicyManagerRule5 | PolicyManagerRule6 | PolicyManagerRule7 | PolicyManagerRule8 | PolicyManagerRule9 | PolicyManagerRule10 | PolicyManagerRule11
    ]
    policies: list[PolicyManagerPolicy]


class CaptiveportalSettings(BaseModel):
    enabled: bool | None = None
    acceptText: str | None = None
    acceptButtonText: str | None = None
    messageHeading: str | None = None
    messageText: str | None = None
    welcomeText: str | None = None
    logo: Logo | None = None
    timeoutValue: float | None = None
    timeoutPeriod: str | None = None
    pageTitle: str | None = None
    rules: list[CaptiveportalRules] | None = None


class QuotaManagerSettings(BaseModel):
    enabled: bool | None = None
    configurations: list[QuotaManagerConfiguration]
    exceed_actions: list[QuotaManagerExceedAction]
    rules: list[QuotaManagerRule]


class BypassSettings(BaseModel):
    rules: list[BypassRules] | None = None


class ReportsSettings(BaseModel):
    entries: list[ReportEntry] | None = None


class V1Config(BaseModel):
    version: conint(ge=1)
    network: NetworkSettings
    system: SystemSettings
    reports: ReportsSettings | None = None
    firewall: FirewallSettings | None = None
    dhcp: DhcpSettings | None = None
    dns: DnsSettings | None = None
    accounts: AccountsSettings | None = None
    dashboard: DashboardSettings | None = None
    files: Any | None = None
    wan: WanSettings | None = None
    discovery: DiscoverySettings | None = None
    geoip: GeoipSettings | None = None
    ipsec: IpsecServerSettings | None = None
    routes: Any | None = None
    threatprevention: ThreatpreventionSettings | None = None
    uris: Any | None = None
    webfilter: WebfilterSettings | None = None
    application_control: ApplicationControlSettings | None = None
    policy_manager: PolicyManagerSettings | None = None
    stats: StatsSettings | None = None
    dynamic_lists: DynamicListsSettings | None = None
    captive_portal: CaptiveportalSettings | None = None
    quota_manager: QuotaManagerSettings | None = None
    logger: Logger | None = None
    databases: list[DatabaseConfigSettings] | None = Field(
        None, description="Database settings"
    )
    bypass: BypassSettings | None = None
    dns_filter: DnsfilterSettings | None = None
    alerts: list[AlertObject] | None = Field(None, description="alerts configuration")
    ips: IpsSettings | None = None
