# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2025-09-30T12:15:34+00:00
#   version:   0.33.0

from __future__ import annotations

from collections.abc import Mapping, Sequence
from enum import Enum
from ipaddress import IPv4Address, IPv6Address
from typing import Annotated, Any, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class AddressFamily(BaseModel):
    """
    BGP address family configuration
    """

    ipv4: Annotated[bool, Field(description="Enable IPv4 address family")]
    ipv6: Annotated[bool, Field(description="Enable IPv6 address family")]


class Neighbor(BaseModel):
    ip: Annotated[str, Field(description="The IP address of the neighbor")]
    asn: Annotated[
        int,
        Field(
            description="The Autonomous System Number of the neighbor",
            ge=0,
            le=4294967295,
        ),
    ]
    update_source: Annotated[
        str | None, Field(description="The source IP address for BGP updates")
    ] = None
    keepalive: Annotated[
        int | None, Field(description="The BGP keepalive timer in seconds")
    ] = 60
    hold: Annotated[int | None, Field(description="The BGP hold timer in seconds")] = 180


class BgpItem(BaseModel):
    """
    BGP settings
    """

    vrf: Annotated[str | None, Field(description="The VRF to use for this BGP instance")] = (
        "default"
    )
    local_asn: Annotated[
        int,
        Field(description="The local Autonomous System Number", ge=0, le=4294967295),
    ]
    router_id: Annotated[IPv4Address, Field(description="The BGP router ID")]
    graceful_restart: Annotated[
        bool | None, Field(description="Enable BGP graceful restart")
    ] = False
    advertised_networks: Annotated[
        Sequence[str] | None, Field(description="A list of networks to advertise")
    ] = None
    address_family: Annotated[AddressFamily, Field(description="BGP address family configuration")]
    neighbors: Annotated[Sequence[Neighbor], Field(description="BGP neighbor configuration")]


class SwitchPort(BaseModel):
    """
    A port on an Ethernet switch
    """

    id: Annotated[str, Field(description="The port id")]
    pvid: Annotated[str, Field(description="The primary vlan id")]
    cpu_port: Annotated[
        bool, Field(description="True if this port is connected directly to the CPU")
    ]


class SwitchVlan(BaseModel):
    """
    A vlan on an Ethernet switch
    """

    id: Annotated[str, Field(description="The vlan id")]


class DeviceSettings(BaseModel):
    """
    string
    """


class Type(Enum):
    NIC = "NIC"
    VLAN = "VLAN"
    WIFI = "WIFI"
    OPENVPN = "OPENVPN"
    WIREGUARD = "WIREGUARD"
    WWAN = "WWAN"


class ConfigType(Enum):
    """
    The configuration type
    """

    ADDRESSED = "ADDRESSED"
    BRIDGED = "BRIDGED"


class V4ConfigType(Enum):
    """
    The IPv4 configuration type
    """

    STATIC = "STATIC"
    DHCP = "DHCP"
    DISABLED = "DISABLED"


class V6ConfigType(Enum):
    """
    IPv6 configuration type
    """

    DHCP = "DHCP"
    SLAAC = "SLAAC"
    ASSIGN = "ASSIGN"
    STATIC = "STATIC"
    DISABLED = "DISABLED"


class DhcpOption(BaseModel):
    """
    A DHCP option
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: Annotated[bool, Field(description="True if option is enabled")]
    description: Annotated[
        str | None, Field(description="Admin-supplied human readable description")
    ] = None
    value: Annotated[str, Field(description="The dnsmasq option value")]


class WirelessEncryption(Enum):
    """
    The wireless encryption method
    """

    NONE = "NONE"
    WPA1 = "WPA1"
    WPA12 = "WPA12"
    WPA2 = "WPA2"


class WirelessMode(Enum):
    """
    The wireless mode (AP or client)
    """

    AP = "AP"
    CLIENT = "CLIENT"


class WireguardEditMode(Enum):
    """
    How this VPN is to be edited
    """

    PASTE = "PASTE"
    MANUAL = "MANUAL"


class WireguardType(Enum):
    """
    Type of of VPN
    """

    ROAMING = "ROAMING"
    TUNNEL = "TUNNEL"


class SimAuth(Enum):
    """
    Sim authentication method
    """

    NONE = "NONE"
    PAP = "PAP"
    CHAP = "CHAP"
    BOTH = "BOTH"


class SimMode(Enum):
    """
    Sim mode
    """

    ALL = "ALL"
    LTE = "LTE"
    UMTS = "UMTS"
    GSM = "GSM"
    CDMA = "CDMA"
    TDSCDMA = "TDSCDMA"


class SimPdptype(Enum):
    """
    Sim connection method
    """

    IPV4 = "IPV4"
    IPV6 = "IPV6"
    IPV4V6 = "IPV4V6"


class EthDuplex(Enum):
    """
    Duplex mode
    """

    half = "half"
    full = "full"


class Encoding(Enum):
    """
    The encoding of the file
    """

    base64 = "base64"


class FileSettings(BaseModel):
    """
    A specific widget settings
    """

    encoding: Annotated[Encoding, Field(description="The encoding of the file")]
    contents: Annotated[str, Field(description="The (encoded) contents of the file")]
    path: Annotated[
        str | None, Field(description="The path of the file, not used in some cases")
    ] = None
    operation: Annotated[
        str | None,
        Field(
            description="The sync-settings operation that needs to take place if this file changes"
        ),
    ] = None


class Ipv4Alias(BaseModel):
    """
    An IPv4 alias
    """


class Ipv6Alias(BaseModel):
    """
    An IPv6 alias
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    v6Address: Annotated[IPv6Address, Field(description="The IPv6 static address")]
    v6Prefix: Annotated[int, Field(description="The IPv6 static prefix", ge=1, le=128)]


class WireguardAddress(BaseModel):
    """
    WireGuard address
    """


class WireguardAllowedIp(BaseModel):
    """
    WireGuard allowed IP networks
    """


class WireguardPeer(BaseModel):
    """
    A wireguard peer
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    publicKey: Annotated[str, Field(description="The wireguard peer's public key")]
    allowedIps: Annotated[
        Sequence[WireguardAllowedIp],
        Field(description="List of peer's allowed IP addresses"),
    ]
    host: Annotated[str | None, Field(description="The wireguard server's IP or hostname")] = (
        None
    )
    port: Annotated[int | None, Field(description="The wireguard server's port")] = None
    presharedKey: Annotated[
        str | None, Field(description="The wireguard peer's pre-shared key")
    ] = None
    keepalive: Annotated[
        int | None,
        Field(description="The wireguard persistent keepalive interval (seconds) for this peer"),
    ] = None
    routeAllowedIps: Annotated[
        bool | None,
        Field(description="True if packets from this wireguard peer should be routed"),
    ] = None


class Track(BaseModel):
    """
    VRRP Track Object
    """


class Logging(BaseModel):
    """
    System Logging
    """

    type: Annotated[str | None, Field(description="Type of log file")] = None
    file: Annotated[str | None, Field(description="Path to log file")] = None
    size: Annotated[int | None, Field(description="Size of log file in Kib")] = None
    remote: Annotated[bool | None, Field(description="Is log file located remotely")] = None
    ip: Annotated[str | None, Field(description="IP of remote log")] = None
    port: Annotated[int | None, Field(description="Port of remote log")] = None
    protocol: Annotated[
        str | None, Field(description="Protocol for remote logging (either tcp/udp)")
    ] = None
    prefix: Annotated[str | None, Field(description="Logging Prefix")] = None


class SetupWizardSettings(BaseModel):
    """
    A specific widget settings
    """

    completed: Annotated[
        bool | None, Field(description="True if the setup wizard has been completed")
    ] = None
    lastStep: Annotated[
        str | None,
        Field(
            description="The last completed step of the wizard (used by the wizard to store progress for restore)"
        ),
    ] = None


class TimeZoneSettings(BaseModel):
    """
    The timezone settings
    """

    displayName: Annotated[
        str | None, Field(description="The display name of the timezone (in the UI)")
    ] = None
    value: Annotated[
        str | None,
        Field(description="The actual value of the timezone (used by OS)"),
    ] = None


class CloudSettings(BaseModel):
    """
    The timezone settings
    """

    enabled: Annotated[bool | None, Field(description="Enable cloud connection")] = None
    supportAccessEnabled: Annotated[
        bool | None, Field(description="Enable remote support team access")
    ] = None
    cloudServers: Annotated[Sequence[str] | None, Field(description="Remote cloud servers")] = (
        None
    )


class AutoSettings(BaseModel):
    """
    The timezone settings
    """

    enabled: Annotated[bool | None, Field(description="Enable auto schedule")] = None
    dayOfWeek: Annotated[
        int | None,
        Field(
            description="The day of week to auto run process (0-6) (0 is Sunday 6 is Saturday)",
            ge=0,
            le=6,
        ),
    ] = None
    hourOfDay: Annotated[
        int | None,
        Field(description="The hour of day to auto run process (0-23)", ge=0, le=23),
    ] = None
    minuteOfHour: Annotated[
        int | None,
        Field(description="The minute of hour to auto run process (0-59)", ge=0, le=59),
    ] = None


class Type1(Enum):
    """
    The type of report/chart
    """

    TEXT = "TEXT"
    EVENTS = "EVENTS"
    CATEGORIES = "CATEGORIES"
    SERIES = "SERIES"
    CATEGORIES_SERIES = "CATEGORIES_SERIES"


class Operator(Enum):
    """
    The sql operator
    """

    EQ = "EQ"
    NE = "NE"
    GT = "GT"
    LT = "LT"
    GE = "GE"
    LE = "LE"
    LIKE = "LIKE"
    NOT_LIKE = "NOT_LIKE"
    IS = "IS"
    IS_NOT = "IS_NOT"
    IN = "IN"
    NOT_IN = "NOT_IN"


class ReportQueryText(BaseModel):
    """
    The report query (SQL configuration) options for a TEXT report
    """

    columns: Annotated[
        Sequence[str], Field(description="The columns to query for text-based reports")
    ]


class ReportQuerySeries(BaseModel):
    """
    The report query (SQL configuration) options for a SERIES report
    """

    columns: Annotated[
        Sequence[str] | None,
        Field(
            description="The columns to query for series reports. If null, the columns will be queried dynamically using categoriesGroupColumn, categoriesAggregation, and categoriesLimit. If unspecified the categories query will be used to determine columns"
        ),
    ] = None
    timeIntervalSeconds: Annotated[
        int | None,
        Field(
            description="The time granularity of series report in seconds (1 = 1 datapoint/second, 60 = 1 datapoint/minute). Beware often 1 second is ideal and the UI can aggregate multiple datapoints using dataGroupingApproximation. 60 if unspecified.",
            ge=1,
        ),
    ] = None


class ReportQueryCategories(BaseModel):
    """
    The report query (SQL configuration) options for a CATEGORIES report
    """

    groupColumn: Annotated[
        str,
        Field(
            description="This is the column to group by in categories reports. This is the X in Top X category reports."
        ),
    ]
    aggregationFunction: Annotated[
        str,
        Field(
            description="This is the aggregation function for the categoriesGroupColumn. This is usually count(*) or sum(*)."
        ),
    ]
    aggregationValue: Annotated[
        str,
        Field(description='This is the value to be aggregated. For count(*) this can be "*".'),
    ]
    limit: Annotated[
        int | None,
        Field(
            description="This is the limit of the number of results for categories. 10 for Top 10. Beware this is normally null (no limit) as the rendering will properly show the sum of the long tail of values as 'Others'."
        ),
    ] = None
    orderByColumn: Annotated[
        int | None,
        Field(
            description="This defines the column to use to order the results. 1 means categoriesOrderByColumn, 2 means the aggregation by value. 2 if unspecified.",
            ge=1,
            le=2,
        ),
    ] = None
    orderAsc: Annotated[
        bool | None,
        Field(
            description="If true the results will be order by ASC, if false or unspecified the results will be order by DESC."
        ),
    ] = None


class ReportQueryEvents(BaseModel):
    """
    The report query (SQL configuration) options for an EVENTS report
    """

    orderByColumn: Annotated[
        str | None,
        Field(
            description="The column name to order by. If unspecified the results will be ordered by 'time_stamp'"
        ),
    ] = None
    orderAsc: Annotated[
        bool | None,
        Field(
            description="If true the results will be order by ASC, if false or unspecified the results will be order by DESC."
        ),
    ] = None


class Type3(Enum):
    """
    The chart type
    """

    spline = "spline"
    line = "line"
    areaspline = "areaspline"
    area = "area"
    pie = "pie"
    column = "column"


class Stacking(Enum):
    """
    Stacking type. In case of Time Series data, multiple series can be stacked.
    """

    none = "none"
    normal = "normal"
    percent = "percent"


class DashStyle(Enum):
    """
    The line/area charts line dashing style
    """

    Solid = "Solid"
    ShortDash = "ShortDash"
    ShortDashDot = "ShortDashDot"
    ShortDashDotDot = "ShortDashDotDot"
    Dot = "Dot"
    Dash = "Dash"
    LongDash = "LongDash"
    LongDashDot = "LongDashDot"
    LongDashDotDot = "LongDashDotDot"


class DataGroupingApproximation(Enum):
    """
    The approximation method for data grouping
    """

    average = "average"
    high = "high"
    low = "low"
    sum = "sum"


class ReportRendering(BaseModel):
    """
    The report render (display) options
    """

    type: Annotated[Type3 | None, Field(description="The chart type")] = None
    units: Annotated[str | None, Field(description="The units of the report")] = None
    colors: Annotated[Sequence[str] | None, Field(description="The color palette")] = None
    stacking: Annotated[
        Stacking | None,
        Field(
            description="Stacking type. In case of Time Series data, multiple series can be stacked."
        ),
    ] = None
    lineWidth: Annotated[
        float | None,
        Field(
            description="The line/area chart line width (px)",
            ge=0.0,
            le=5.0,
            multiple_of=0.5,
        ),
    ] = None
    borderWidth: Annotated[
        float | None,
        Field(
            description="The border width separating pie slices (px)",
            ge=0.0,
            le=5.0,
            multiple_of=0.5,
        ),
    ] = None
    topAreaOpacity: Annotated[
        float | None,
        Field(
            description="The opacity of top part for an area chart",
            ge=0.0,
            le=1.0,
            multiple_of=0.1,
        ),
    ] = None
    bottomAreaOpacity: Annotated[
        float | None,
        Field(
            description="The opacity of bottom part for an area chart",
            ge=0.0,
            le=1.0,
            multiple_of=0.1,
        ),
    ] = None
    dashStyle: Annotated[
        DashStyle | None,
        Field(description="The line/area charts line dashing style"),
    ] = None
    dataGroupingEnabled: Annotated[
        bool | None,
        Field(description="True to enable data grouping for Time Series"),
    ] = None
    dataGroupingApproximation: Annotated[
        DataGroupingApproximation | None,
        Field(description="The approximation method for data grouping"),
    ] = None
    dataGroupingFactor: Annotated[
        float | None,
        Field(
            description="The data grouping size. Higher value results in bigger number of points being grouped. (px)",
            ge=10.0,
            le=50.0,
            multiple_of=10.0,
        ),
    ] = None
    donutInnerSize: Annotated[
        float | None,
        Field(
            description="Inner ring percent size of a donut (which is a pie based chart). 0 is equivalent to a normal pie",
            ge=0.0,
            le=90.0,
            multiple_of=10.0,
        ),
    ] = None
    field_3dEnabled: Annotated[
        bool | None,
        Field(
            alias="3dEnabled",
            description="Enable or disable the 3D options for the pie/donut charts",
        ),
    ] = None
    field_3dAlpha: Annotated[
        float | None,
        Field(
            alias="3dAlpha",
            description="Adjusts the 3D aspect of the pie chart",
            ge=0.0,
            le=100.0,
            multiple_of=5.0,
        ),
    ] = None
    field_3dDepth: Annotated[
        float | None,
        Field(
            alias="3dDepth",
            description="Adjusts the 3D depth of the pie chart",
            ge=10.0,
            le=50.0,
            multiple_of=5.0,
        ),
    ] = None
    slicesNumber: Annotated[
        float | None,
        Field(
            description="The number of pie slices to show on pie charts by default",
            ge=2.0,
            le=15.0,
            multiple_of=1.0,
        ),
    ] = None
    defaultColumns: Annotated[
        Sequence[str] | None,
        Field(description="The the default column names to display for event list reports"),
    ] = None
    columnRenames: Annotated[
        Mapping[str, Any] | None,
        Field(description="A string->string map for database name to display name"),
    ] = None
    textString: Annotated[
        str | None, Field(description="The user-defined string for a text report")
    ] = None


class Type4(Enum):
    JUMP = "JUMP"
    GOTO = "GOTO"
    ACCEPT = "ACCEPT"
    RETURN = "RETURN"
    REJECT = "REJECT"
    DROP = "DROP"


class Family(Enum):
    """
    The family of the table
    """

    inet = "inet"
    ip = "ip"
    ip6 = "ip6"
    arp = "arp"
    bridge = "bridge"
    netdev = "netdev"
    ip_ip6 = "ip,ip6"
    ip_ip6_inet = "ip,ip6,inet"


class ChainType(Enum):
    """
    The type of chains in this table
    """

    filter = "filter"
    route = "route"
    nat = "nat"


class Hook(Enum):
    """
    The netfilter hook, only applies to base chains
    """

    prerouting = "prerouting"
    input = "input"
    forward = "forward"
    output = "output"
    postrouting = "postrouting"
    ingress = "ingress"


class Type6(Enum):
    JUMP = "JUMP"
    GOTO = "GOTO"
    ACCEPT = "ACCEPT"
    RETURN = "RETURN"
    SNAT = "SNAT"
    MASQUERADE = "MASQUERADE"


class PortForwardTable(RootModel[Any]):
    root: Any


class Type7(Enum):
    JUMP = "JUMP"
    GOTO = "GOTO"
    ACCEPT = "ACCEPT"
    RETURN = "RETURN"
    REJECT = "REJECT"
    DROP = "DROP"
    DNAT = "DNAT"
    SNAT = "SNAT"
    MASQUERADE = "MASQUERADE"
    SET_PRIORITY = "SET_PRIORITY"
    LIMIT_EXCEED_ACTION = "LIMIT_EXCEED_ACTION"
    WAN_POLICY = "WAN_POLICY"


class RuleAction(BaseModel):
    """
    A rule condition
    """

    model_config = ConfigDict(
        extra="allow",
    )
    type: Type7 | None = None
    chain: str | None = None
    dnat_address: str | None = None
    dnat_port: int | None = None
    snat_address: str | None = None
    priority: Annotated[int | None, Field(ge=1, le=21)] = None
    destination: int | None = None
    policy: int | None = None
    limit_exceed_action: str | None = None
    return_action: Annotated[
        bool | None,
        Field(
            description="True if an additional RETURN action is to be added ahead of SET_PRIORITY"
        ),
    ] = None


class Type8(Enum):
    JUMP = "JUMP"
    GOTO = "GOTO"
    ACCEPT = "ACCEPT"
    RETURN = "RETURN"
    DROP = "DROP"
    SET_PRIORITY = "SET_PRIORITY"
    LIMIT_EXCEED_ACTION = "LIMIT_EXCEED_ACTION"


class Action3(RuleAction):
    type: Type8 | None = None


class Op(Enum):
    field__ = "=="
    field___1 = "!="


class RuleCondition1(BaseModel):
    op: Op | None = None


class Value(Enum):
    unspec = "unspec"
    unicast = "unicast"
    local = "local"
    broadcast = "broadcast"
    anycast = "anycast"
    multicast = "multicast"
    blackhole = "blackhole"
    unreachable = "unreachable"
    prohibit = "prohibit"


class Type9(Enum):
    IP_PROTOCOL = "IP_PROTOCOL"
    SOURCE_ADDRESS = "SOURCE_ADDRESS"
    SOURCE_ADDRESS_TYPE = "SOURCE_ADDRESS_TYPE"
    DESTINATION_ADDRESS = "DESTINATION_ADDRESS"
    DESTINATION_ADDRESS_TYPE = "DESTINATION_ADDRESS_TYPE"
    CLIENT_ADDRESS = "CLIENT_ADDRESS"
    SERVER_ADDRESS = "SERVER_ADDRESS"
    LOCAL_ADDRESS = "LOCAL_ADDRESS"
    REMOTE_ADDRESS = "REMOTE_ADDRESS"
    CLIENT_ADDRESS_V6 = "CLIENT_ADDRESS_V6"
    SERVER_ADDRESS_V6 = "SERVER_ADDRESS_V6"
    LOCAL_ADDRESS_V6 = "LOCAL_ADDRESS_V6"
    REMOTE_ADDRESS_V6 = "REMOTE_ADDRESS_V6"
    SOURCE_ADDRESS_V6 = "SOURCE_ADDRESS_V6"
    DESTINATION_ADDRESS_V6 = "DESTINATION_ADDRESS_V6"
    SOURCE_PORT = "SOURCE_PORT"
    DESTINATION_PORT = "DESTINATION_PORT"
    CLIENT_PORT = "CLIENT_PORT"
    SERVER_PORT = "SERVER_PORT"
    LOCAL_PORT = "LOCAL_PORT"
    REMOTE_PORT = "REMOTE_PORT"
    CLIENT_INTERFACE_ZONE = "CLIENT_INTERFACE_ZONE"
    SERVER_INTERFACE_ZONE = "SERVER_INTERFACE_ZONE"
    SOURCE_INTERFACE_ZONE = "SOURCE_INTERFACE_ZONE"
    DESTINATION_INTERFACE_ZONE = "DESTINATION_INTERFACE_ZONE"
    CLIENT_INTERFACE_TYPE = "CLIENT_INTERFACE_TYPE"
    SERVER_INTERFACE_TYPE = "SERVER_INTERFACE_TYPE"
    SOURCE_INTERFACE_TYPE = "SOURCE_INTERFACE_TYPE"
    DESTINATION_INTERFACE_TYPE = "DESTINATION_INTERFACE_TYPE"
    SOURCE_INTERFACE_NAME = "SOURCE_INTERFACE_NAME"
    DESTINATION_INTERFACE_NAME = "DESTINATION_INTERFACE_NAME"
    CLIENT_HOSTNAME = "CLIENT_HOSTNAME"
    SERVER_HOSTNAME = "SERVER_HOSTNAME"
    LOCAL_HOSTNAME = "LOCAL_HOSTNAME"
    REMOTE_HOSTNAME = "REMOTE_HOSTNAME"
    CLIENT_USERNAME = "CLIENT_USERNAME"
    CLIENT_DNS_HINT = "CLIENT_DNS_HINT"
    SERVER_USERNAME = "SERVER_USERNAME"
    SERVER_DNS_HINT = "SERVER_DNS_HINT"
    LOCAL_USERNAME = "LOCAL_USERNAME"
    REMOTE_USERNAME = "REMOTE_USERNAME"
    APPLICATION_ID = "APPLICATION_ID"
    APPLICATION_NAME = "APPLICATION_NAME"
    APPLICATION_PROTOCHAIN = "APPLICATION_PROTOCHAIN"
    APPLICATION_DETAIL = "APPLICATION_DETAIL"
    APPLICATION_CATEGORY = "APPLICATION_CATEGORY"
    APPLICATION_ID_INFERRED = "APPLICATION_ID_INFERRED"
    APPLICATION_NAME_INFERRED = "APPLICATION_NAME_INFERRED"
    APPLICATION_CONFIDENCE_INFERRED = "APPLICATION_CONFIDENCE_INFERRED"
    APPLICATION_PROTOCHAIN_INFERRED = "APPLICATION_PROTOCHAIN_INFERRED"
    APPLICATION_PRODUCTIVITY_INFERRED = "APPLICATION_PRODUCTIVITY_INFERRED"
    APPLICATION_RISK_INFERRED = "APPLICATION_RISK_INFERRED"
    APPLICATION_CATEGORY_INFERRED = "APPLICATION_CATEGORY_INFERRED"
    CERT_SUBJECT_CN = "CERT_SUBJECT_CN"
    CERT_SUBJECT_SN = "CERT_SUBJECT_SN"
    CERT_SUBJECT_C = "CERT_SUBJECT_C"
    CERT_SUBJECT_O = "CERT_SUBJECT_O"
    CERT_SUBJECT_OU = "CERT_SUBJECT_OU"
    CERT_SUBJECT_L = "CERT_SUBJECT_L"
    CERT_SUBJECT_P = "CERT_SUBJECT_P"
    CERT_SUBJECT_SA = "CERT_SUBJECT_SA"
    CERT_SUBJECT_PC = "CERT_SUBJECT_PC"
    CERT_SUBJECT_SAN = "CERT_SUBJECT_SAN"
    CERT_SUBJECT_DNS = "CERT_SUBJECT_DNS"
    CERT_ISSUER_CN = "CERT_ISSUER_CN"
    CERT_ISSUER_SN = "CERT_ISSUER_SN"
    CERT_ISSUER_C = "CERT_ISSUER_C"
    CERT_ISSUER_O = "CERT_ISSUER_O"
    CERT_ISSUER_OU = "CERT_ISSUER_OU"
    CERT_ISSUER_L = "CERT_ISSUER_L"
    CERT_ISSUER_P = "CERT_ISSUER_P"
    CERT_ISSUER_SA = "CERT_ISSUER_SA"
    CERT_ISSUER_PC = "CERT_ISSUER_PC"
    CT_STATE = "CT_STATE"
    LIMIT_RATE = "LIMIT_RATE"
    BURST_SIZE = "BURST_SIZE"


class Op1(Enum):
    field__ = "=="
    field___1 = "!="
    field_ = "<"
    field__1 = ">"
    field___2 = "<="
    field___3 = ">="


class RateUnit(Enum):
    PACKETS_PER_SECOND = "PACKETS_PER_SECOND"
    PACKETS_PER_MINUTE = "PACKETS_PER_MINUTE"
    PACKETS_PER_HOUR = "PACKETS_PER_HOUR"
    PACKETS_PER_DAY = "PACKETS_PER_DAY"
    PACKETS_PER_WEEK = "PACKETS_PER_WEEK"
    BYTES_PER_SECOND = "BYTES_PER_SECOND"
    KBYTES_PER_SECOND = "KBYTES_PER_SECOND"
    MBYTES_PER_SECOND = "MBYTES_PER_SECOND"


class BurstUnit(Enum):
    PACKETS = "PACKETS"
    BYTES = "BYTES"
    KBYTES = "KBYTES"
    MBYTES = "MBYTES"


class GroupSelector(Enum):
    IP_PROTOCOL = "IP_PROTOCOL"
    SOURCE_ADDRESS = "SOURCE_ADDRESS"
    DESTINATION_ADDRESS = "DESTINATION_ADDRESS"
    SOURCE_ADDRESS_V6 = "SOURCE_ADDRESS_V6"
    DESTINATION_ADDRESS_V6 = "DESTINATION_ADDRESS_V6"
    SOURCE_PORT = "SOURCE_PORT"
    DESTINATION_PORT = "DESTINATION_PORT"


class RuleCondition2(BaseModel):
    """
    A rule condition
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    type: Type9
    value: str
    op: Op1 | None = None
    rate_unit: RateUnit | None = None
    burst_unit: BurstUnit | None = None
    group_selector: GroupSelector | None = None


class RuleCondition3(RuleCondition1, RuleCondition2):
    """
    A rule condition
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    type: Type9
    value: str
    op: Op1 | None = None
    rate_unit: RateUnit | None = None
    burst_unit: BurstUnit | None = None
    group_selector: GroupSelector | None = None


class RuleCondition4(RuleCondition1, RuleCondition2):
    """
    A rule condition
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    type: Type9
    value: str
    op: Op1 | None = None
    rate_unit: RateUnit | None = None
    burst_unit: BurstUnit | None = None
    group_selector: GroupSelector | None = None


class RuleCondition5(RuleCondition1, RuleCondition2):
    """
    A rule condition
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    type: Type9
    value: str
    op: Op1 | None = None
    rate_unit: RateUnit | None = None
    burst_unit: BurstUnit | None = None
    group_selector: GroupSelector | None = None


class RuleCondition6(RuleCondition1, RuleCondition2):
    """
    A rule condition
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    type: Type9
    value: str
    op: Op1 | None = None
    rate_unit: RateUnit | None = None
    burst_unit: BurstUnit | None = None
    group_selector: GroupSelector | None = None


class RuleCondition7(RuleCondition1, RuleCondition2):
    """
    A rule condition
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    type: Type9
    value: str
    op: Op1 | None = None
    rate_unit: RateUnit | None = None
    burst_unit: BurstUnit | None = None
    group_selector: GroupSelector | None = None


class RuleCondition8(RuleCondition1, RuleCondition2):
    """
    A rule condition
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    type: Type9
    value: str
    op: Op1 | None = None
    rate_unit: RateUnit | None = None
    burst_unit: BurstUnit | None = None
    group_selector: GroupSelector | None = None


class RuleCondition9(RuleCondition1, RuleCondition2):
    """
    A rule condition
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    type: Type9
    value: str
    op: Op1 | None = None
    rate_unit: RateUnit | None = None
    burst_unit: BurstUnit | None = None
    group_selector: GroupSelector | None = None


class RuleCondition(
    RootModel[
        Union[
            RuleCondition3,
            RuleCondition4,
            RuleCondition5,
            RuleCondition6,
            RuleCondition7,
            RuleCondition8,
            RuleCondition9,
        ]
    ]
):
    """
    A rule condition
    """

    root: Annotated[
        RuleCondition3 | RuleCondition4 | RuleCondition5 | RuleCondition6 | RuleCondition7 | RuleCondition8 | RuleCondition9,
        Field(description="A rule condition"),
    ]


class Rule(BaseModel):
    """
    A rule
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    ruleId: Annotated[int, Field(description="The rule ID", ge=1)]
    enabled: Annotated[
        bool | None, Field(description="True if rule is enabled, False otherwise")
    ] = None
    description: Annotated[str | None, Field(description="The human description")] = None
    conditions: Sequence[RuleCondition3 | RuleCondition4 | RuleCondition5 | RuleCondition6 | RuleCondition7 | RuleCondition8 | RuleCondition9] | None = None
    action: RuleAction | None = None
    readOnly: Annotated[
        bool | None, Field(description="True if read only, False otherwise")
    ] = None


class Action2(RuleAction):
    type: Type6 | None = None


class Rule2(Rule):
    action: Action2 | None = None


class Chain(BaseModel):
    name: Annotated[str, Field(description="The name of the chain")]
    description: Annotated[str | None, Field(description="The human description")] = None
    hook: Annotated[
        Hook | None,
        Field(description="The netfilter hook, only applies to base chains"),
    ] = None
    priority: Annotated[
        int | None,
        Field(description="The netfilter priority, only applies to base chains"),
    ] = None
    base: Annotated[bool | None, Field(description="True if base chain, False otherwise")] = (
        None
    )
    editable: Annotated[
        bool | None, Field(description="True if chain is editable, False otherwise")
    ] = None
    rules: Sequence[Rule]


class Action1(RuleAction):
    type: Type4 | None = None


class Rule1(Rule):
    action: Action1 | None = None


class Chain1(Chain):
    rules: Sequence[Rule1] | None = None


class Table(BaseModel):
    name: Annotated[str, Field(description="The name of the table")]
    family: Annotated[Family, Field(description="The family of the table")]
    chain_type: Annotated[
        ChainType | None, Field(description="The type of chains in this table")
    ] = None
    chains: Sequence[Chain]
    description: Annotated[str | None, Field(description="The human description")] = None


class Action(RuleAction):
    type: Type4 | None = None


class RuleModel(Rule):
    action: Action | None = None


class ChainModel(Chain):
    rules: Sequence[RuleModel] | None = None


class AccessTable(Table):
    chains: Sequence[ChainModel] | None = None


class StaticDhcpEntry(BaseModel):
    """
    An IP address to be statically assigned to a specific device
    """

    address: Annotated[str, Field(description="IP Address to assign to the device")]
    macAddress: Annotated[str, Field(description="The MAC address of the device")]
    description: Annotated[str | None, Field(description="The human description")] = None


class LocalDnsServer(BaseModel):
    """
    A local DNS server
    """

    domain: Annotated[str, Field(description="A local domain")]
    localServer: Annotated[str, Field(description="The IP of a local DNS server")]
    description: Annotated[str | None, Field(description="The human description")] = None


class StaticDnsEntry(BaseModel):
    """
    A name to map to a specified IP address
    """

    address: Annotated[str, Field(description="IP Address to map")]
    name: Annotated[str, Field(description="The name to map")]
    description: Annotated[str | None, Field(description="The human description")] = None


class AccountCredentials(BaseModel):
    """
    A specific account admin/user settings
    """

    username: Annotated[str | None, Field(description="The username")] = None
    email: Annotated[str | None, Field(description="This accounts email address")] = None
    authorizedKeys: Annotated[str | None, Field(description="SSH authorized keys")] = None
    passwordCleartext: Annotated[
        str | None,
        Field(
            description="The cleartext password - this should not be saved in the settings file"
        ),
    ] = None
    passwordHashMD5: Annotated[
        str | None,
        Field(
            description="The hash of the password as it would appear in /etc/shadow (MD5 salted)"
        ),
    ] = None
    passwordHashSHA256: Annotated[
        str | None,
        Field(
            description="The hash of the password as it would appear in /etc/shadow (SHA256 salted)"
        ),
    ] = None
    passwordHashSHA512: Annotated[
        str | None,
        Field(
            description="The hash of the password as it would appear in /etc/shadow (SHA512 salted)"
        ),
    ] = None


class WidgetSettings(BaseModel):
    """
    A specific widget settings
    """

    name: Annotated[str | None, Field(description="The name of the report")] = None
    interval: Annotated[int | None, Field(description="The refresh interval (in seconds)")] = (
        None
    )


class Type17(Enum):
    """
    The policy type
    """

    SPECIFIC_WAN = "SPECIFIC_WAN"
    BEST_OF = "BEST_OF"
    BALANCE = "BALANCE"


class BestOfMetric(Enum):
    """
    The metric used for best of policies
    """

    LOWEST_LATENCY = "LOWEST_LATENCY"
    HIGHEST_AVAILABLE_BANDWIDTH = "HIGHEST_AVAILABLE_BANDWIDTH"
    LOWEST_JITTER = "LOWEST_JITTER"
    LOWEST_PACKET_LOSS = "LOWEST_PACKET_LOSS"


class BalanceAlgorithm(Enum):
    """
    Algorithm used for balance type policies
    """

    WEIGHTED = "WEIGHTED"
    LATENCY = "LATENCY"
    AVAILABLE_BANDWIDTH = "AVAILABLE_BANDWIDTH"
    BANDWIDTH = "BANDWIDTH"


class WanInterface(BaseModel):
    interfaceId: Annotated[int, Field(description="The interfaceId of the interface")]
    weight: Annotated[
        int | None,
        Field(description="The static balance weight for this interface", ge=1, le=10000),
    ] = None


class Type18(Enum):
    """
    The policy type
    """

    ATTRIBUTE = "ATTRIBUTE"
    METRIC = "METRIC"
    CONNECTIVITY = "CONNECTIVITY"


class Attribute(Enum):
    """
    An interface attribute
    """

    VPN = "VPN"
    NAME = "NAME"


class Metric(Enum):
    """
    An interface metric
    """

    LATENCY = "LATENCY"
    AVAILABLE_BANDWIDTH = "AVAILABLE_BANDWIDTH"
    JITTER = "JITTER"
    PACKET_LOSS = "PACKET_LOSS"


class MetricOp(Enum):
    field_ = "<"
    field__1 = ">"
    field__ = "<="
    field___1 = ">="


class ConnectivityTestType(Enum):
    """
    The type of connectivity test
    """

    PING = "PING"
    ARP = "ARP"
    DNS = "DNS"
    HTTP = "HTTP"


class WanCriterion(BaseModel):
    type: Annotated[Type18, Field(description="The policy type")]
    attribute: Annotated[Attribute | None, Field(description="An interface attribute")] = None
    name_contains: Annotated[
        str | None,
        Field(
            description="The string to search for in interface names for the NAME attribute criterion"
        ),
    ] = None
    metric: Annotated[Metric | None, Field(description="An interface metric")] = None
    metric_value: Annotated[
        int | None,
        Field(description="The value associated with the interface metric"),
    ] = None
    metric_op: MetricOp | None = None
    connectivityTestType: Annotated[
        ConnectivityTestType | None,
        Field(description="The type of connectivity test"),
    ] = None
    connectivityTestInterval: Annotated[
        int | None, Field(description="The connectivity test interval in seconds")
    ] = None
    connectivityTestTimeout: Annotated[
        int | None, Field(description="The connectivity test timeout in seconds")
    ] = None
    connectivityTestFailureThreshold: Annotated[
        int | None,
        Field(
            description="The number of test failures (out of 10) that represents an interface failure"
        ),
    ] = None
    connectivityTestTarget: Annotated[
        str | None, Field(description="IP/host address to test")
    ] = None


class DiscoveryPluginSettings(BaseModel):
    """
    Individual Discovery component settings
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    type: Annotated[str | None, Field(description="The discovery collector type")] = None
    enabled: Annotated[
        bool | None, Field(description="Enable/Disable the individual collector")
    ] = None
    autoInterval: Annotated[
        float | None,
        Field(description="The autoscan interval to run this collector on"),
    ] = None


class Actions1(BaseModel):
    pass


class Actions(BaseModel):
    block: Sequence[str] | None = None
    log: Sequence[str] | None = None


class GeoipNetworkSettings(BaseModel):
    """
    geoip bypassed network object
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    address: Annotated[str | None, Field(description="CIDR network to bypass from fencing")] = (
        None
    )
    description: Annotated[str | None, Field(description="Description of the network")] = None


class Authentication(BaseModel):
    """
    authentication definition
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    shared_secret: Annotated[
        str | None, Field(description="The shared secret value for auth")
    ] = None
    type: Annotated[str | None, Field(description="the type of authentication configured")] = (
        None
    )


class IpsecEncryption(BaseModel):
    """
    available ipsec encryption methods
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    encryption: Annotated[str | None, Field(description="The encryption type")] = None
    group: Annotated[str | None, Field(description="The encryption group information")] = None
    hash: Annotated[str | None, Field(description="The hash type information")] = None


class NetworkDefinition(BaseModel):
    """
    Gateway Network information
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    network: Annotated[str | None, Field(description="the network address")] = None
    prefix: Annotated[float | None, Field(description="The network CIDR prefix range")] = None


class StaticRouteItem(BaseModel):
    """
    Static route definition object
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: Annotated[
        bool | None,
        Field(description="True if static route is enabled, false otherwise"),
    ] = None
    description: Annotated[str | None, Field(description="Description of the static route")] = (
        None
    )
    interfaceId: Annotated[
        float | None,
        Field(description="The interface ID to link the static route with"),
    ] = None
    network: Annotated[
        str | None, Field(description="Static route network destination information")
    ] = None
    nextHop: Annotated[
        str | None,
        Field(description="The nexthop/gateway of the static route definition"),
    ] = None
    metric: Annotated[float | None, Field(description="Specifies the route metric to use")] = (
        None
    )


class ThreatpreventionBypassItem(BaseModel):
    """
    threat prevention bypassed network object
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    host: Annotated[
        str | None,
        Field(description="CIDR network to bypass from threat prevention"),
    ] = None
    description: Annotated[str | None, Field(description="Description of the network")] = None


class UriTranslations(BaseModel):
    """
    URI translation objects
    """

    uri: Annotated[str | None, Field(description="The URI to match for")] = None
    host: Annotated[
        str | None,
        Field(description="The host to replace the URI with during URI translation"),
    ] = None


class WebfilterCategories(BaseModel):
    """
    web filter categories
    """

    enabled: Annotated[
        bool | None,
        Field(
            description="True if web filter category is being filtered/blocked, false otherwise"
        ),
    ] = None
    flagged: Annotated[
        bool | None,
        Field(description="True if web filter category is being flagged, false otherwise"),
    ] = None
    id: Annotated[
        float | None,
        Field(description="Unique identifier of the web filter category"),
    ] = None
    logged: Annotated[
        bool | None,
        Field(description="True if web filter category is being reported, false otherwise"),
    ] = None


class WebfilterListItem(BaseModel):
    """
    web filter list items for block/pass list entries
    """

    enabled: Annotated[
        bool | None,
        Field(description="True if list item filtered/blocked, false otherwise"),
    ] = None
    description: Annotated[str | None, Field(description="Description of the list item")] = None
    exact: Annotated[
        bool | None,
        Field(
            description="True if list item name is being exact matched, otherwise wildcard match the name"
        ),
    ] = None
    flagged: Annotated[
        bool | None,
        Field(description="True if list item is being flagged, false otherwise"),
    ] = None
    name: Annotated[str | None, Field(description="The list item value to match on")] = None
    logged: Annotated[
        bool | None,
        Field(description="True if list item is being reported, false otherwise"),
    ] = None


class ApplicationControlActions(BaseModel):
    reject: Sequence[str] | None = None
    block: Sequence[str] | None = None
    flag: Sequence[str] | None = None
    log: Sequence[str] | None = None


class Type19(Enum):
    CLIENT_ADDRESS = "CLIENT_ADDRESS"
    CLIENT_PORT = "CLIENT_PORT"
    SERVER_ADDRESS = "SERVER_ADDRESS"
    SERVER_PORT = "SERVER_PORT"
    PROTOCOL_TYPE = "PROTOCOL_TYPE"


class ApplicationControlCustomRulesCondition(BaseModel):
    type: Type19 | None = None
    value: str | None = None
    op: Op1 | None = None


class Type20(Enum):
    CLIENT_ADDRESS = "CLIENT_ADDRESS"
    CLIENT_PORT = "CLIENT_PORT"
    DAY_OF_WEEK = "DAY_OF_WEEK"
    DEST_ADDRESS = "DEST_ADDRESS"
    DESTINATION_INTERFACE_TYPE = "DESTINATION_INTERFACE_TYPE"
    GEOIP_LOCATION = "GEOIP_LOCATION"
    INTERFACE = "INTERFACE"
    SERVER_ADDRESS = "SERVER_ADDRESS"
    SERVER_PORT = "SERVER_PORT"
    SERVICE_ENDPOINT = "SERVICE_ENDPOINT"
    SERVICE_ENDPOINT_CLIENT = "SERVICE_ENDPOINT_CLIENT"
    SERVICE_ENDPOINT_SERVER = "SERVICE_ENDPOINT_SERVER"
    SOURCE_ADDRESS = "SOURCE_ADDRESS"
    SOURCE_INTERFACE_TYPE = "SOURCE_INTERFACE_TYPE"
    PROTOCOL_TYPE = "PROTOCOL_TYPE"
    TIME_OF_DAY = "TIME_OF_DAY"
    VLAN_ID = "VLAN_ID"
    APPLICATION = "APPLICATION"
    CLIENT_APPLICATION = "CLIENT_APPLICATION"
    SERVER_APPLICATION = "SERVER_APPLICATION"


class Op10(Enum):
    field__ = "=="
    field___1 = "!="
    field_ = "<"
    field__1 = ">"
    field___2 = "<="
    field___3 = ">="
    in_ = "in"
    match = "match"


class PolicyManagerCriterion(BaseModel):
    type: Type20 | None = None
    op: Op10 | None = None
    object: Any | Sequence[Any] | None = None


class Type21(Enum):
    mfw_rule_geoip = "mfw-rule-geoip"


class Type22(Enum):
    mfw_rule_applicationcontrol = "mfw-rule-applicationcontrol"


class Type23(Enum):
    mfw_rule_wanpolicy = "mfw-rule-wanpolicy"


class Type24(Enum):
    mfw_rule_security = "mfw-rule-security"


class Type25(Enum):
    DnsRuleObject = "DnsRuleObject"


class Type26(Enum):
    mfw_rule_portforward = "mfw-rule-portforward"


class Type27(Enum):
    mfw_rule_threatprevention = "mfw-rule-threatprevention"


class Type28(Enum):
    mfw_rule_webfilter = "mfw-rule-webfilter"


class Type29(Enum):
    mfw_rule_captiveportal = "mfw-rule-captiveportal"


class Type30(Enum):
    mfw_rule_shaping = "mfw-rule-shaping"


class Type31(Enum):
    mfw_rule_nat = "mfw-rule-nat"


class PolicyManagerCategory(Enum):
    discovery = "discovery"
    geoip = "geoip"
    threatprevention = "threatprevention"
    webfilter = "webfilter"


class PolicyManagerFilters(RootModel[Sequence[Mapping[str, Any]]]):
    root: Sequence[Mapping[str, Any]]


class PolicyManagerFilter(BaseModel):
    operator: str | None = None
    type: str | None = None
    property: str | None = None


class Type32(Enum):
    GeoIPLocation = "GeoIPLocation"
    InterfaceZone = "InterfaceZone"
    IPAddrList = "IPAddrList"
    ServiceEndpoint = "ServiceEndpoint"
    ConditionGroup = "ConditionGroup"


class PolicyManagerIpspecifier(RootModel[Any]):
    root: Any


class PolicyManagerPortspecifier(RootModel[Any]):
    root: Any


class PingAnalyzerSettings(BaseModel):
    """
    Ping Analyzer object
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    name: Annotated[str | None, Field(description="Name of Ping Analyzer")] = None
    interfaceIds: Sequence[int] | None = None
    ipv4Addresses: Sequence[str] | None = None
    ipv6Addresses: Sequence[str] | None = None
    enabled: Annotated[bool | None, Field(description="Turns a Ping Analyzer on or off")] = None


class DynamicListsConfiguration(BaseModel):
    """
    Dynamic block list configurations
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: Annotated[
        bool | None,
        Field(description="True, if user want this configuration to be active."),
    ] = None
    name: Annotated[str | None, Field(description="Name of the block list from source")] = None
    id: Annotated[str | None, Field(description="ID of the block list from source")] = None
    source: Annotated[
        str | None, Field(description="The source URL or the local file path")
    ] = None
    type: Annotated[
        str | None, Field(description="Either IP or URL block list type from source")
    ] = None
    pollingUnit: Annotated[
        str | None,
        Field(
            description="Tells us the interval of fetching whether its Minutes, Hours, Days or Months as a unit"
        ),
    ] = None
    pollingTime: Annotated[
        float | None,
        Field(description="The respective value based on the selection of the PullingUnit"),
    ] = None
    skipCertCheck: Annotated[
        bool | None,
        Field(description="Flag to ignore certificate verification of HTTPS requests"),
    ] = None
    parsingMethod: Annotated[
        str | None,
        Field(
            description="The parsing method for a passed IP list. Stored as a regular expression."
        ),
    ] = None


class Logo(BaseModel):
    imageName: str | None = None


class Type33(Enum):
    ENABLE = "ENABLE"
    DISABLE = "DISABLE"


class Action4(BaseModel):
    type: Type33 | None = None


class Type34(Enum):
    DESTINATION_ADDRESS = "DESTINATION_ADDRESS"
    DESTINATION_ADDRESS_V6 = "DESTINATION_ADDRESS_V6"
    DESTINATION_INTERFACE_TYPE = "DESTINATION_INTERFACE_TYPE"
    DESTINATION_INTERFACE_ZONE = "DESTINATION_INTERFACE_ZONE"
    DESTINATION_PORT = "DESTINATION_PORT"
    SOURCE_ADDRESS = "SOURCE_ADDRESS"
    SOURCE_ADDRESS_V6 = "SOURCE_ADDRESS_V6"
    SOURCE_INTERFACE_TYPE = "SOURCE_INTERFACE_TYPE"
    SOURCE_INTERFACE_ZONE = "SOURCE_INTERFACE_ZONE"
    SOURCE_PORT = "SOURCE_PORT"
    IP_PROTOCOL = "IP_PROTOCOL"


class Op11(Enum):
    field__ = "=="
    field___1 = "!="


class CaptiveportalRulesConditions(BaseModel):
    type: Type34 | None = None
    value: str | None = None
    op: Op11 | None = None


class QuotaManagerConfiguration(BaseModel):
    id: str
    name: str | None = None
    description: str | None = None
    data_size: str
    period: str


class QuotaManagerExceedAction(BaseModel):
    id: str
    name: str | None = None
    description: str | None = None
    default: bool | None = None
    action: str


class Action5(BaseModel):
    pass


class QuotaManagerRuleAction(BaseModel):
    exceed_action_id: str
    quota_id: str
    type: str


class QuotaManagerRuleCondition(BaseModel):
    op: str
    type: str
    value: str
    proto: str | None = None


class Logname(Enum):
    """
    The logging level
    """

    EMERG = "EMERG"
    ALERT = "ALERT"
    CRIT = "CRIT"
    ERROR = "ERROR"
    WARN = "WARN"
    NOTICE = "NOTICE"
    INFO = "INFO"
    DEBUG = "DEBUG"
    TRACE = "TRACE"


class LoggerSetting1(BaseModel):
    """
    The logger settings for a package or function
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    logname: Annotated[Logname, Field(description="The logging level")]


class LoggerSetting(RootModel[Optional[Mapping[str, LoggerSetting1]]]):
    root: Annotated[
        Mapping[str, LoggerSetting1] | None,
        Field(description="The logger settings for a package or function"),
    ] = None


class Type35(Enum):
    """
    Database type i.e. MySQL,postgres
    """

    sqlite = "sqlite"
    mysql = "mysql"
    postgres = "postgres"


class DatabaseConfigSettings(BaseModel):
    name: Annotated[
        str | None,
        Field(description="DB Connection name (this will be shown on UI)"),
    ] = None
    description: Annotated[
        str | None, Field(description="Additional description for the DB Connection")
    ] = None
    id: Annotated[str | None, Field(description="UUID for Database (auto-generated)")] = None
    type: Annotated[Type35 | None, Field(description="Database type i.e. MySQL,postgres")] = (
        None
    )
    enabled: Annotated[
        bool | None, Field(description="Database Connection enabled/disabled")
    ] = None
    db_server: Annotated[str | None, Field(description="Remote Host/Server")] = None
    db_name: Annotated[str | None, Field(description="Name of the Database.")] = None
    db_username: Annotated[str | None, Field(description="Username for the Database.")] = None
    db_port: Annotated[int | None, Field(description="Database Port")] = None
    db_password: Annotated[
        str | None, Field(description="Database password for the given user.")
    ] = None
    db_connection_string: Annotated[str | None, Field(description="Connection String")] = None
    default: Annotated[
        bool | None,
        Field(description="Flag which determines if the database is default"),
    ] = None


class Type36(Enum):
    BYPASS = "BYPASS"


class Action6(BaseModel):
    type: Type36 | None = None


class Type37(Enum):
    DESTINATION_ADDRESS = "DESTINATION_ADDRESS"
    DESTINATION_ADDRESS_V6 = "DESTINATION_ADDRESS_V6"
    DESTINATION_INTERFACE_TYPE = "DESTINATION_INTERFACE_TYPE"
    DESTINATION_INTERFACE_ZONE = "DESTINATION_INTERFACE_ZONE"
    DESTINATION_PORT = "DESTINATION_PORT"
    SOURCE_ADDRESS = "SOURCE_ADDRESS"
    SOURCE_ADDRESS_V6 = "SOURCE_ADDRESS_V6"
    SOURCE_INTERFACE_TYPE = "SOURCE_INTERFACE_TYPE"
    SOURCE_INTERFACE_ZONE = "SOURCE_INTERFACE_ZONE"
    SOURCE_PORT = "SOURCE_PORT"
    IP_PROTOCOL = "IP_PROTOCOL"


class BypassRulesConditions(BaseModel):
    type: Type37 | None = None
    value: str | None = None
    op: Op11 | None = None
    port_protocol: str | None = None


class DnsfilterBlocklist(BaseModel):
    description: str | None = None
    enabled: bool | None = None
    flagged: bool | None = None
    logged: bool | None = None
    exact: bool | None = None
    name: str | None = None


class AlertObject(BaseModel):
    message: str
    enabled: bool


class Action7(Enum):
    """
    Action to take when the rule matches
    """

    alert = "alert"
    block = "block"
    pass_ = "pass"
    reject = "reject"


class IpsRule(BaseModel):
    """
    IPS rule
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: Annotated[bool | None, Field(description="Enable/Disable the IPS rule")] = None
    sid: Annotated[int | None, Field(description="The unique identifier for the IPS rule")] = (
        None
    )
    action: Annotated[
        Action7 | None, Field(description="Action to take when the rule matches")
    ] = None
    message: Annotated[
        str | None,
        Field(description="Message to log when the rule matches (optional)"),
    ] = None
    classType: Annotated[
        str | None, Field(description="Class type of the IPS rule (optional)")
    ] = None


class IpsRuleList(BaseModel):
    """
    IPS rule list source
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    name: Annotated[str | None, Field(description="Name of the IPS rule list")] = None
    url: Annotated[str | None, Field(description="URL to fetch the IPS rule list from")] = None
    enabled: Annotated[bool | None, Field(description="Enable/Disable the IPS rule list")] = (
        None
    )
    local_dir: Annotated[
        str | None,
        Field(description="Local directory to reference the IPS rule list (optional)"),
    ] = None
    version: Annotated[
        str | None, Field(description="Version of the IPS rule list (optional)")
    ] = None


class SwitchSettings(BaseModel):
    """
    Ethernet switch settings
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    name: Annotated[str, Field(description="The switch name (switch0)")]
    ports: Annotated[Sequence[SwitchPort], Field(description="The ports of the switch")]
    vlans: Annotated[Sequence[SwitchVlan], Field(description="Hardware based vlans of the switch")]


class InterfaceSettings(BaseModel):
    """
    interface settings
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    interfaceId: Annotated[int, Field(description="Unique interface ID", ge=1)]
    name: Annotated[str, Field(description="Human readable name", max_length=15, min_length=1)]
    enabled: Annotated[
        bool | None,
        Field(description="True if this interface is enabled, False otherwise"),
    ] = None
    device: Annotated[
        str, Field(description="The physical dev represented by this interface (eth0)")
    ]
    wan: Annotated[
        bool,
        Field(
            description="True if interface is a WAN (internet) connected interface, False otherwise"
        ),
    ]
    hidden: Annotated[
        bool | None,
        Field(
            description="True if this interface should be hidden from the user, False otherwise"
        ),
    ] = None
    type: Type
    configType: Annotated[ConfigType, Field(description="The configuration type")]
    natEgress: Annotated[
        bool | None,
        Field(
            description="If true, NAT outbound sessions and block non-port-forwarded sessions from this interface"
        ),
    ] = None
    natIngress: Annotated[
        bool | None,
        Field(
            description="If true, NAT inbound sessions and block non-port-forwarded sessions to this interface"
        ),
    ] = None
    v4ConfigType: Annotated[
        V4ConfigType | None, Field(description="The IPv4 configuration type")
    ] = None
    v4StaticAddress: Annotated[
        IPv4Address | None, Field(description="The IPv4 static address")
    ] = None
    v4StaticPrefix: Annotated[
        int | None,
        Field(description="The IPv4 static prefix (netmask)", ge=1, le=32),
    ] = None
    v4StaticGateway: Annotated[
        IPv4Address | None, Field(description="The IPv4 static gateway")
    ] = None
    v4StaticDNS1: Annotated[IPv4Address | None, Field(description="The IPv4 DNS 1")] = None
    v4StaticDNS2: Annotated[IPv4Address | None, Field(description="The IPv4 DNS 2")] = None
    v4DhcpAddressOverride: Annotated[
        IPv4Address | None, Field(description="The DHCP address override")
    ] = None
    v4DhcpPrefixOverride: Annotated[
        int | None, Field(description="The DHCP prefix override", ge=1, le=32)
    ] = None
    v4DhcpGatewayOverride: Annotated[
        IPv4Address | None, Field(description="The DHCP gateway override")
    ] = None
    v4DhcpDNS1Override: Annotated[
        IPv4Address | None, Field(description="The DHCP DNS 1 override")
    ] = None
    v4DhcpDNS2Override: Annotated[
        IPv4Address | None, Field(description="The DHCP DNS 2 override")
    ] = None
    v4PPPoEUsername: Annotated[
        str | None, Field(description="The PPPoE username", min_length=1)
    ] = None
    v4PPPoEPassword: Annotated[
        str | None, Field(description="The PPPoE password", min_length=1)
    ] = None
    v4PPPoEUsePeerDNS: Annotated[
        bool | None, Field(description="If true, use PPPoE peer DNS")
    ] = None
    v4PPPoEOverrideDNS1: Annotated[
        IPv4Address | None, Field(description="The PPPoE DNS 1 override")
    ] = None
    v4PPPoEOverrideDNS2: Annotated[
        IPv4Address | None, Field(description="The PPPoE DNS 2 override")
    ] = None
    v4Aliases: Annotated[
        Sequence[Ipv4Alias] | None, Field(description="IPv4 address aliases")
    ] = None
    v6ConfigType: Annotated[
        V6ConfigType | None, Field(description="IPv6 configuration type")
    ] = None
    v6StaticAddress: Annotated[
        IPv6Address | None, Field(description="The IPv6 static address")
    ] = None
    v6StaticPrefix: Annotated[
        int | None, Field(description="The IPv6 static prefix", ge=1, le=128)
    ] = None
    v6StaticGateway: Annotated[
        IPv6Address | None, Field(description="The IPv6 static gateway")
    ] = None
    v6StaticDNS1: Annotated[IPv6Address | None, Field(description="The IPv6 DNS 1")] = None
    v6StaticDNS2: Annotated[IPv6Address | None, Field(description="The IPv6 DNS 2")] = None
    v6DhcpDNS1Override: Annotated[
        IPv6Address | None, Field(description="The DHCP DNS 1 override")
    ] = None
    v6DhcpDNS2Override: Annotated[
        IPv6Address | None, Field(description="The DHCP DNS 2 override")
    ] = None
    v6AssignHint: Annotated[str | None, Field(description="The IPv6 auto assign hint")] = None
    v6AssignPrefix: Annotated[
        int | None, Field(description="The IPv6 auto assign prefix", ge=1, le=128)
    ] = None
    v6Aliases: Annotated[
        Sequence[Ipv6Alias] | None, Field(description="IPv6 address aliases")
    ] = None
    routerAdvertisements: Annotated[
        bool | None, Field(description="Send router advertisements")
    ] = None
    bridgedTo: Annotated[
        int | None,
        Field(
            description="The interface ID that this interface is bridgedTo if this is configType == BRIDGED",
            ge=1,
        ),
    ] = None
    qosEnabled: Annotated[bool | None, Field(description="Enable QoS")] = None
    downloadKbps: Annotated[
        int | None,
        Field(
            description="The maximum download kilobit per second of this WAN interface",
            ge=0,
        ),
    ] = None
    uploadKbps: Annotated[
        int | None,
        Field(
            description="The maximum upload kilobit per second of this WAN interface",
            ge=0,
        ),
    ] = None
    macaddr: Annotated[
        str | None, Field(description="The MAC address to set for the interface")
    ] = None
    dhcpEnabled: Annotated[
        bool | None, Field(description="If true, provide DHCP on this interface")
    ] = None
    dhcpRangeStart: Annotated[
        IPv4Address | None, Field(description="The start of the DHCP offer range")
    ] = None
    dhcpRangeEnd: Annotated[
        IPv4Address | None, Field(description="The end of the DHCP offer range")
    ] = None
    dhcpLeaseDuration: Annotated[
        int | None, Field(description="The DHCP lease duration in seconds", ge=0)
    ] = None
    dhcpGatewayOverride: Annotated[
        IPv4Address | None,
        Field(description="The DHCP gateway to offer. If null, the local interface IP is used"),
    ] = None
    dhcpPrefixOverride: Annotated[
        int | None,
        Field(
            description="The DHCP prefix/netmask to offer. If null, the local interface prefix is used",
            ge=1,
            le=32,
        ),
    ] = None
    dhcpDNSOverride: Annotated[
        IPv4Address | None,
        Field(description="The DHCP DNS to offer. If null, the local interface IP is used"),
    ] = None
    dhcpOptions: Annotated[Sequence[DhcpOption] | None, Field(description="DHCP Options")] = (
        None
    )
    vrrpEnabled: Annotated[bool | None, Field(description="True if VRRP is enabled")] = None
    vrrpID: Annotated[int | None, Field(description="The VRRP ID", ge=1, le=255)] = None
    vrrpPriority: Annotated[
        int | None, Field(description="The VRRP priority", ge=1, le=255)
    ] = None
    vrrpV4Aliases: Annotated[
        Sequence[Ipv4Alias] | None, Field(description="VRRP IPv4 address aliases")
    ] = None
    vrrpTrack: Annotated[
        Sequence[Track] | None, Field(description="VRRP Group Tracked Objects")
    ] = None
    wirelessSsid: Annotated[str | None, Field(description="The wireless SSID")] = None
    wirelessEncryption: Annotated[
        WirelessEncryption | None,
        Field(description="The wireless encryption method"),
    ] = None
    wirelessMode: Annotated[
        WirelessMode | None, Field(description="The wireless mode (AP or client)")
    ] = None
    wirelessPassword: Annotated[str | None, Field(description="The wireless password")] = None
    wirelessChannel: Annotated[int | None, Field(description="The wireless channel", ge=0)] = (
        None
    )
    wirelessThroughput: Annotated[
        str | None, Field(description="The wireless throughput mode")
    ] = None
    openvpnConfFile: FileSettings | None = None
    openvpnUsernamePasswordEnabled: Annotated[
        bool | None,
        Field(
            description="True if this openvpn interface requires username/password authentication"
        ),
    ] = None
    openvpnUsername: Annotated[
        str | None,
        Field(description="The openvpn username if username authentication enabled"),
    ] = None
    boundInterfaceId: Annotated[
        str | None,
        Field(
            description="The interfaceId of the interface that binding technologies i.e. openvpn, VLANs, Wireguard should use to connect (0 or undefined means Any WAN)"
        ),
    ] = None
    openvpnPasswordBase64: Annotated[
        str | None,
        Field(
            description="The openvpn password in cleartext/base64 if username authentication if enabled"
        ),
    ] = None
    openvpnPeerDns: Annotated[
        bool | None,
        Field(description="Enables or Disables using the Peer DNS option from the OpenVPN tunnel"),
    ] = None
    wireguardPrivateKey: Annotated[
        str | None, Field(description="The wireguard private key")
    ] = None
    wireguardPublicKey: Annotated[str | None, Field(description="The wireguard public key")] = (
        None
    )
    wireguardAddresses: Annotated[
        Sequence[WireguardAddress] | None,
        Field(description="List of WireGuard's interface IP addresses"),
    ] = None
    wireguardEditMode: Annotated[
        WireguardEditMode | None, Field(description="How this VPN is to be edited")
    ] = None
    wireguardType: Annotated[WireguardType | None, Field(description="Type of of VPN")] = None
    wireguardPort: Annotated[
        int | None, Field(description="The port that wireguard listens on")
    ] = None
    wireguardPeers: Annotated[
        Sequence[WireguardPeer] | None, Field(description="List of wireguard peers")
    ] = None
    simNetwork: Annotated[str | None, Field(description="Sim network name")] = None
    simApn: Annotated[str | None, Field(description="Modem access point name")] = None
    simProfile: Annotated[int | None, Field(description="Modem profile number")] = None
    simPin: Annotated[int | None, Field(description="Sim pin code")] = None
    simDelay: Annotated[
        int | None, Field(description="Delay before configuring the modem on boot")
    ] = None
    simTimeout: Annotated[
        int | None,
        Field(description="Time to wait while attempting to configure the connection"),
    ] = None
    simAuth: Annotated[SimAuth | None, Field(description="Sim authentication method")] = None
    simUsername: Annotated[str | None, Field(description="Sim authentication username")] = None
    simPassword: Annotated[str | None, Field(description="Sim authentication password")] = None
    simMode: Annotated[SimMode | None, Field(description="Sim mode")] = None
    simPdptype: Annotated[SimPdptype | None, Field(description="Sim connection method")] = None
    simPlmn: Annotated[
        int | None,
        Field(description="Sim PLMN (first three digits are mmc, last three digits are mnc)"),
    ] = None
    simAutoconnect: Annotated[
        bool | None, Field(description="Enable automatic connect/reconnect")
    ] = None
    ethAutoneg: bool | None = None
    ethDuplex: Annotated[EthDuplex | None, Field(description="Duplex mode")] = None
    ethSpeed: Annotated[int | None, Field(description="Interface speed")] = None
    mtu: Annotated[int | None, Field(description="Interface MTU setting")] = None
    routeMtu: Annotated[
        bool | None, Field(description="Use Route MTU Discovery to determine MTU")
    ] = None
    vlanid: Annotated[
        int | None,
        Field(
            description="Software device level 8021q VLAN ID to assign to an interface - requires a parent 'boundInterfaceId'"
        ),
    ] = None
    virtual: Annotated[
        bool | None, Field(description="Virtual interface indicator (vlan/vpn/etc.)")
    ] = None
    wanWeight: Annotated[
        float | None,
        Field(description="Weight of WAN interface to use in weighted balance algorithms"),
    ] = None


class SystemSettings(BaseModel):
    """
    system settings
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    hostName: str
    domainName: str
    httpPort: str | None = None
    httpsPort: str | None = None
    cloud: CloudSettings | None = None
    timeZone: TimeZoneSettings | None = None
    setupWizard: SetupWizardSettings | None = None
    autoUpgrade: AutoSettings | None = None
    autoBackup: AutoSettings | None = None
    logging: Logging | None = None


class ReportCondition(BaseModel):
    """
    A reporting SQL condition
    """

    uniqueId: Annotated[str, Field(description="The unique string identifier")]
    name: Annotated[str, Field(description="The name of the report")]
    category: Annotated[str, Field(description="The category of the report")]
    description: Annotated[str, Field(description="The description of the report")]
    displayOrder: Annotated[int, Field(description="The sort order for this report")]
    type: Annotated[Type1, Field(description="The type of report/chart")]
    rendering: ReportRendering
    column: Annotated[str | None, Field(description="The column to check the value")] = None
    operator: Annotated[Operator | None, Field(description="The sql operator")] = None
    value: Annotated[str | None, Field(description="The value to check")] = None


class FilterTable(Table):
    chains: Sequence[Chain1] | None = None


class Chain2(Chain):
    rules: Sequence[Rule2] | None = None


class NatTable(Table):
    chains: Sequence[Chain2] | None = None


class Rule3(Rule):
    action: Action3 | None = None


class Chain3(Chain):
    rules: Sequence[Rule3] | None = None


class ShapingTable(Table):
    chains: Sequence[Chain3] | None = None


class FirewallSettings(BaseModel):
    """
    firewall/nftables settings
    """

    tables: Annotated[
        Mapping[str, AccessTable] | Mapping[str, FilterTable] | Mapping[str, NatTable] | Mapping[str, Any] | Mapping[str, ShapingTable] | Mapping[str, Table] | None,
        Field(description="A map from the table name as the key, to the table json object"),
    ] = None


class DhcpSettings(BaseModel):
    """
    DHCP settings
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    dhcpAuthoritative: Annotated[
        bool | None,
        Field(description="True if this is the only dhcp server on the network"),
    ] = None
    staticDhcpEntries: Annotated[
        Sequence[StaticDhcpEntry] | None,
        Field(description="List of static DHCP assignments"),
    ] = None


class DnsSettings(BaseModel):
    """
    DNS settings
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    localServers: Annotated[
        Sequence[LocalDnsServer] | None,
        Field(description="List of local DNS servers"),
    ] = None
    staticEntries: Annotated[
        Sequence[StaticDnsEntry] | None,
        Field(description="List of static DNS assignments"),
    ] = None


class AccountsSettings(BaseModel):
    """
    Accounts settings
    """

    credentials: Sequence[AccountCredentials] | None = None


class DashboardSettings(BaseModel):
    """
    Dashboard settings
    """

    widgets: Sequence[WidgetSettings] | None = None


class WanPolicy(BaseModel):
    policyId: Annotated[int, Field(description="The policy ID", ge=1)]
    enabled: Annotated[
        bool | None, Field(description="True if policy is enabled, False otherwise")
    ] = None
    description: Annotated[str | None, Field(description="The human description")] = None
    type: Annotated[Type17, Field(description="The policy type")]
    best_of_metric: Annotated[
        BestOfMetric | None,
        Field(description="The metric used for best of policies"),
    ] = None
    interfaces: Annotated[
        Sequence[WanInterface],
        Field(
            description="The list of interfaces in the policy.  A single interface of id 0 means all wan interfaces"
        ),
    ]
    balance_algorithm: Annotated[
        BalanceAlgorithm | None,
        Field(description="Algorithm used for balance type policies"),
    ] = None
    criteria: Annotated[
        Sequence[WanCriterion] | None,
        Field(description="The list of policy interface criteria"),
    ] = None
    readOnly: Annotated[
        bool | None, Field(description="True if read only, False otherwise")
    ] = None


class DiscoverySettings(BaseModel):
    """
    host device discovery settings
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: Annotated[
        bool | None,
        Field(description="Enable/Disable the host device discovery tool"),
    ] = None
    plugins: Sequence[DiscoveryPluginSettings] | None = None


class GeoipSettings(BaseModel):
    """
    geoip fencing service settings
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: Annotated[
        bool | None, Field(description="Enable/Disable the geoip fencing service")
    ] = None
    enabledLog: Annotated[
        bool | None,
        Field(description="Enable/Disable logging of the the geoip fencing results"),
    ] = None
    actions: Sequence[Actions] | Actions1 | None = None
    passedNetworks: Sequence[GeoipNetworkSettings] | None = None


class GatewayDefinition(BaseModel):
    """
    Ipsec gateway configuration information
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    gateway: Annotated[
        str | None,
        Field(description="gateway address information for local/remote gateway"),
    ] = None
    networks: Sequence[NetworkDefinition] | None = None


class RouteSettings(RootModel[Sequence[StaticRouteItem]]):
    """
    Static route entries
    """

    root: Annotated[Sequence[StaticRouteItem], Field(description="Static route entries")]


class ThreatpreventionSettings(BaseModel):
    """
    Threat prevention service settings
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: Annotated[
        bool | None,
        Field(description="Enable/Disable the threat prevention service"),
    ] = None
    redirect: Annotated[
        bool | None, Field(description="Enable/Disable redirection to block page")
    ] = None
    sensitivity: Annotated[
        float | None,
        Field(
            description="Threat Prevention sensitivity level, block everything above this threat level"
        ),
    ] = None
    passList: Sequence[ThreatpreventionBypassItem] | None = None


class Uris(BaseModel):
    """
    URI settings
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    uriTranslations: Sequence[UriTranslations] | None = None


class WebfilterSettings(BaseModel):
    """
    web filter settings
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: Annotated[
        bool | None,
        Field(description="True if web filter is enabled, false otherwise"),
    ] = None
    categories: Sequence[WebfilterCategories] | None = None
    blockList: Sequence[WebfilterListItem] | None = None
    passList: Sequence[WebfilterListItem] | None = None


class ApplicationControlCustomRules(BaseModel):
    name: str | None = None
    description: str | None = None
    category: str | None = None
    conditions: Sequence[Sequence[ApplicationControlCustomRulesCondition]] | None = None
    action: str | None = None


class PolicyManagerConfiguration(BaseModel):
    id: str
    name: str | None = None
    description: str | None = None
    category: Sequence[PolicyManagerCategory] | None = None


class PolicyManagerObject(BaseModel):
    id: str
    name: str | None = None
    description: str | None = None


class PolicyManagerObjectGroup(BaseModel):
    id: str
    name: str | None = None
    description: str | None = None
    items: Sequence[str]


class PolicyManagerCondition(BaseModel):
    id: str
    name: str | None = None
    description: str | None = None
    conditions: Sequence[PolicyManagerCriterion] | None = None


class PolicyManagerConditionGroup(BaseModel):
    id: str
    name: str | None = None
    description: str | None = None
    items: Sequence[str]


class PolicyManagerRule1(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    type: Type21 | None = None
    conditions: Sequence[str] | None = None
    configuration_id: str | None = None


class PolicyManagerRule2(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    type: Type22 | None = None
    conditions: Sequence[str] | None = None
    configuration_id: str | None = None


class PolicyManagerRule3(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    type: Type23 | None = None
    conditions: Sequence[str] | None = None
    configuration_id: str | None = None


class PolicyManagerRule4(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    type: Type24 | None = None
    conditions: Sequence[str] | None = None


class PolicyManagerRule5(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    type: Type25 | None = None
    conditions: Sequence[str] | None = None
    configuration_id: str | None = None


class PolicyManagerRule6(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    type: Type26 | None = None
    conditions: Sequence[str] | None = None
    dnat_address: str | None = None
    dnat_port: int | None = None


class PolicyManagerRule7(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    type: Type27 | None = None
    conditions: Sequence[str] | None = None
    configuration_id: str | None = None


class PolicyManagerRule8(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    type: Type28 | None = None
    conditions: Sequence[str] | None = None
    configuration_id: str | None = None


class PolicyManagerRule9(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    type: Type29 | None = None
    conditions: Sequence[str] | None = None
    configuration_id: str | None = None


class PolicyManagerRule10(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    type: Type30 | None = None
    conditions: Sequence[str] | None = None
    priority: int | None = None


class PolicyManagerRule11(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    type: Type31 | None = None
    conditions: Sequence[str] | None = None
    snat_address: str | None = None


class PolicyManagerRule(
    RootModel[
        Union[
            PolicyManagerRule1,
            PolicyManagerRule2,
            PolicyManagerRule3,
            PolicyManagerRule4,
            PolicyManagerRule5,
            PolicyManagerRule6,
            PolicyManagerRule7,
            PolicyManagerRule8,
            PolicyManagerRule9,
            PolicyManagerRule10,
            PolicyManagerRule11,
        ]
    ]
):
    root: PolicyManagerRule1 | PolicyManagerRule2 | PolicyManagerRule3 | PolicyManagerRule4 | PolicyManagerRule5 | PolicyManagerRule6 | PolicyManagerRule7 | PolicyManagerRule8 | PolicyManagerRule9 | PolicyManagerRule10 | PolicyManagerRule11


class PolicyManagerPolicy(BaseModel):
    id: str
    name: str | None = None
    description: str | None = None
    conditions: Sequence[str] | None = None
    rule: Sequence[str] | None = None


class PolicyManagerGroup(BaseModel):
    id: str | None = None
    name: str | None = None
    description: str | None = None
    type: Type32
    choice: PolicyManagerConditionGroup | Sequence[Any] | None = None


class StatsSettings(BaseModel):
    """
    Stats service settings
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    pingAnalyzers: Sequence[PingAnalyzerSettings] | None = None


class DynamicListsSettings(BaseModel):
    """
    Dynamic block list feature
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: Annotated[
        bool | None,
        Field(description="enables or disables the entire dynamic blocklist feature"),
    ] = None
    configurations: Sequence[DynamicListsConfiguration] | None = None


class CaptiveportalRules(BaseModel):
    description: str | None = None
    enabled: bool | None = None
    ruleId: str | None = None
    conditions: Sequence[CaptiveportalRulesConditions] | None = None
    action: Action4 | None = None


class QuotaManagerRule(BaseModel):
    id: str
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    action: Sequence[QuotaManagerRuleAction] | Action5 | None = None
    conditions: Sequence[QuotaManagerRuleCondition] | None = None


class Logger(BaseModel):
    """
    Logger settings
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    alertd: Annotated[
        Mapping[str, LoggerSetting1],
        Field(description="The logger settings for a package or function"),
    ]
    cls: Annotated[
        Mapping[str, LoggerSetting1],
        Field(description="The logger settings for a package or function"),
    ]
    discoverd: Annotated[
        Mapping[str, LoggerSetting1],
        Field(description="The logger settings for a package or function"),
    ]
    packetd: Annotated[
        Mapping[str, LoggerSetting1],
        Field(description="The logger settings for a package or function"),
    ]
    reportd: Annotated[
        Mapping[str, LoggerSetting1],
        Field(description="The logger settings for a package or function"),
    ]
    restd: Annotated[
        Mapping[str, LoggerSetting1],
        Field(description="The logger settings for a package or function"),
    ]


class BypassRules(BaseModel):
    description: str | None = None
    enabled: bool | None = None
    ruleId: str | None = None
    conditions: Sequence[BypassRulesConditions] | None = None
    log: str | None = None
    action: Action6 | None = None


class DnsfilterSettings(BaseModel):
    """
    DNS filter settings
    """

    enabled: Annotated[
        bool | None, Field(description="Enable/Disable the dns filter service")
    ] = None
    blockList: Sequence[DnsfilterBlocklist] | None = None


class IpsSettings(BaseModel):
    """
    Intrusion Prevention Service settings
    """

    enabled: Annotated[bool | None, Field(description="Is plugin enabled")] = None
    enabled_ips: Annotated[bool | None, Field(description="Is IPS enabled")] = None
    update_time: Annotated[
        str | None,
        Field(description="Time the update script runs. Is randomly set when created."),
    ] = None
    rules: Annotated[
        Sequence[IpsRule] | None,
        Field(description="List of IPS rules used to override the default rules"),
    ] = None
    ruleLists: Annotated[
        Sequence[IpsRuleList] | None,
        Field(description="List of IPS rule list sources"),
    ] = None


class NetworkSettings(BaseModel):
    """
    network settings
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    interfaces: Sequence[InterfaceSettings] | None = None
    devices: Sequence[DeviceSettings] | None = None
    switches: Sequence[SwitchSettings] | None = None
    bgp: Sequence[BgpItem] | None = None


class ReportEntry(BaseModel):
    """
    A single report
    """

    uniqueId: Annotated[str, Field(description="The unique string identifier")]
    name: Annotated[str, Field(description="The name of the report")]
    category: Annotated[str, Field(description="The category of the report")]
    description: Annotated[str, Field(description="The description of the report")]
    displayOrder: Annotated[int, Field(description="The sort order for this report")]
    readOnly: Annotated[
        bool | None, Field(description="True if read only, False otherwise")
    ] = None
    type: Annotated[Type1, Field(description="The type of report/chart")]
    table: Annotated[str | None, Field(description="The table the report queries")] = None
    tables: Annotated[
        Sequence[str] | None,
        Field(description="A list of tables joined if this is a join. This is used by the UI"),
    ] = None
    conditions: Sequence[ReportCondition] | None = None
    columnDisambiguation: Annotated[
        Sequence[Any] | None,
        Field(
            description="This list of string->string map is a way to disambiguate column names for joined tables (ie time_stamp > a.time_stamp)"
        ),
    ] = None
    userConditions: Sequence[ReportCondition] | None = None
    queryCategories: ReportQueryCategories | None = None
    queryText: ReportQueryText | None = None
    querySeries: ReportQuerySeries | None = None
    queryEvents: ReportQueryEvents | None = None
    rendering: ReportRendering


class WanSettings(BaseModel):
    """
    wan settings
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    policy_chains: Sequence[Chain] | None = None
    policies: Sequence[WanPolicy] | None = None


class IpsecServerSettings(BaseModel):
    """
    IPSec server settings - TBD
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: Annotated[
        bool | None, Field(description="Enable/Disable the geoip fencing service")
    ] = None
    debug: Annotated[
        float | None, Field(description="Enable/Disable ipsec server debug logs")
    ] = None
    authentication: Annotated[
        Authentication | None, Field(description="authentication definition")
    ] = None
    phase1: Sequence[IpsecEncryption] | None = None
    phase2: Sequence[IpsecEncryption] | None = None
    local: Sequence[GatewayDefinition] | None = None
    remote: Sequence[GatewayDefinition] | None = None


class ApplicationControlSettings(BaseModel):
    """
    Application control settings
    """

    enabled: bool | None = None
    cloud_classification: bool | None = None
    custom_rules: Sequence[ApplicationControlCustomRules] | None = None
    actions: Sequence[ApplicationControlActions] | None = None


class PolicyManagerSettings(BaseModel):
    """
    Policy Manager settings
    """

    enabled: bool | None = None
    configurations: Sequence[PolicyManagerConfiguration]
    objects: Sequence[PolicyManagerObject]
    object_groups: Sequence[PolicyManagerObjectGroup]
    conditions: Sequence[PolicyManagerCondition]
    condition_groups: Sequence[PolicyManagerConditionGroup] | None = None
    rules: Sequence[
        PolicyManagerRule1 | PolicyManagerRule2 | PolicyManagerRule3 | PolicyManagerRule4 | PolicyManagerRule5 | PolicyManagerRule6 | PolicyManagerRule7 | PolicyManagerRule8 | PolicyManagerRule9 | PolicyManagerRule10 | PolicyManagerRule11
    ]
    policies: Sequence[PolicyManagerPolicy]


class CaptiveportalSettings(BaseModel):
    """
    Captive portal settings
    """

    enabled: bool | None = None
    acceptText: str | None = None
    acceptButtonText: str | None = None
    messageHeading: str | None = None
    messageText: str | None = None
    welcomeText: str | None = None
    logo: Logo | None = None
    timeoutValue: float | None = None
    timeoutPeriod: str | None = None
    pageTitle: str | None = None
    rules: Sequence[CaptiveportalRules] | None = None


class QuotaManagerSettings(BaseModel):
    """
    Quota Manager settings
    """

    enabled: bool | None = None
    configurations: Sequence[QuotaManagerConfiguration]
    exceed_actions: Sequence[QuotaManagerExceedAction]
    rules: Sequence[QuotaManagerRule]


class BypassSettings(BaseModel):
    """
    Bypass settings
    """

    rules: Sequence[BypassRules] | None = None


class ReportsSettings(BaseModel):
    """
    reports settings
    """

    entries: Sequence[ReportEntry] | None = None


class MfwSchema(BaseModel):
    """
    schema for the JSON settings
    """

    version: Annotated[int, Field(ge=1)]
    network: NetworkSettings
    system: SystemSettings
    reports: ReportsSettings | None = None
    firewall: FirewallSettings | None = None
    dhcp: DhcpSettings | None = None
    dns: DnsSettings | None = None
    accounts: AccountsSettings | None = None
    dashboard: DashboardSettings | None = None
    files: Any | None = None
    wan: WanSettings | None = None
    discovery: DiscoverySettings | None = None
    geoip: GeoipSettings | None = None
    ipsec: IpsecServerSettings | None = None
    routes: Any | None = None
    threatprevention: ThreatpreventionSettings | None = None
    uris: Any | None = None
    webfilter: WebfilterSettings | None = None
    application_control: ApplicationControlSettings | None = None
    policy_manager: PolicyManagerSettings | None = None
    stats: StatsSettings | None = None
    dynamic_lists: DynamicListsSettings | None = None
    captive_portal: CaptiveportalSettings | None = None
    quota_manager: QuotaManagerSettings | None = None
    logger: Logger | None = None
    databases: Annotated[
        Sequence[DatabaseConfigSettings] | None,
        Field(description="Database settings"),
    ] = None
    bypass: BypassSettings | None = None
    dns_filter: DnsfilterSettings | None = None
    alerts: Annotated[
        Sequence[AlertObject] | None, Field(description="alerts configuration")
    ] = None
    ips: IpsSettings | None = None
