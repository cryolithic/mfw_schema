[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv"
]

# Same as Black.
line-length = 99
indent-width = 4

unsafe-fixes = true
target-version="py39"

[tool.ruff.analyze]
detect-string-imports = true

[tool.ruff.lint]

# add all the linters
select = [
  "F", # pyflakes
  "E", # pycodestyle
  "W", # pycodestyle
  "I", # isort
  # "N", # pep8-naming
  # "D", # pydocstyle
  "UP", # pyupgrade
  "ANN", # flake8-annotations
  "ASYNC", # flake8-async
  "S", # flake8-bandit
  "BLE", # flake8-Blind exceptions
  "FBT", # flake8-boolean-trap
  "B", # flake8-bugbear
  "A", # flake8-builtins
  # "COM", # flake8-commas
  # "CPY", # flake8-copyright
  "C4", # flake8-comprehensions
  "DTZ", # flake8-datetimez
  # "T10", # flake8-debugger
  # "DJ", # flake8-django
  "EM", # flake8-errmsg
  "EXE", # flake8-executable
  "FA", # flake8-future-annotations
  "ISC", # flake8-implicit-str-concat
  "ICN", # flake8-import-conventions
  "LOG", # flake8-logging
  "G", # flake8-logging-format
  "INP", # flake8-no-pep420
  "PIE", # flake8-pie
  "T20", # flake8-print
  "PYI", # flake8-pyi
  "PT", # flake8-pytest-style
  "Q", # flake8-quotes
  "RSE", # flake8-raise
  "RET", # flake8-return
  "SLF", # flake8-self
  "SLOT", # flake8-slots
  "SIM", # flake8-simplify
  "TID", # flake8-tidy-imports
  "TC", # flake8-type-checking
  "INT", # flake8-gettext
  "ARG", # flake8-unused-arguments
  # "PTH", # flake8-use-pathlib
  # "TD", # flake8-todos
  # "FIX", # flake8-fixme
  "ERA", # eradicate
  # "PD", # pandas-vet
  "PGH", # pygrep-hooks
  "PL", # Pylint
  "PLC", # Convention
  "PLE", # Error
  "PLR", # Refactor
  "PLW", # Warning
  "TRY", # tryceratops
  "FLY", # flynt
  # "NPY", # NumPy-specific rules
  # "FAST", # FastAPI
  # "AIR", # Airflow
  "PERF", # Perflint
  "FURB", # refurb
  "DOC", # pydoclint
  "RUF", # Ruff-specific rules
]

ignore = [
  "COM812", # missing trailing comma https://docs.astral.sh/ruff/rules/missing-trailing-comma/

  "C90", # mccabe https://docs.astral.sh/ruff/rules/#mccabe-c90

  "CPY001", # missing copyright https://docs.astral.sh/ruff/rules/missing-copyright-notice/

  "D415", # ends in punctuation https://docs.astral.sh/ruff/rules/ends-in-punctuation/

  "E501", # line too long https://docs.astral.sh/ruff/rules/line-too-long/

  # "ISC001", # single-line-implicit-string-concatenation (ISC001) https://docs.astral.sh/ruff/rules/single-line-implicit-string-concatenation/#single-line-implicit-string-concatenation-isc001

  "PLR0913", # too many arguments in function def https://docs.astral.sh/ruff/rules/too-many-arguments/

  "T201", # print found

  "TRY003", # raise vanilla args https://docs.astral.sh/ruff/rules/raise-vanilla-args/

  "TC003",

  "ERA001",

  "S105"

]

[tool.ruff.lint.isort]
# Combines as imports on the same line. See isort's combine-as-imports option.
combine-as-imports = true

[tool.ruff.format]
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true
